{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = void 0;\nconst index_js_1 = require(\"../tokenizer/index.js\");\nconst open_element_stack_js_1 = require(\"./open-element-stack.js\");\nconst formatting_element_list_js_1 = require(\"./formatting-element-list.js\");\nconst default_js_1 = require(\"../tree-adapters/default.js\");\nconst doctype = require(\"../common/doctype.js\");\nconst foreignContent = require(\"../common/foreign-content.js\");\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\nconst unicode = require(\"../common/unicode.js\");\nconst html_js_1 = require(\"../common/html.js\");\nconst token_js_1 = require(\"../common/token.js\");\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n  InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n  InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n  InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n  InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n  InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n  InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n  InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n  InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n  InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n  InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n  InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n  InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n  InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n  InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n  InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n  InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n  InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n  InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n  InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n  InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n  InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n  InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n  InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n  startLine: -1,\n  startCol: -1,\n  startOffset: -1,\n  endLine: -1,\n  endCol: -1,\n  endOffset: -1\n};\nconst TABLE_STRUCTURE_TAGS = new Set([html_js_1.TAG_ID.TABLE, html_js_1.TAG_ID.TBODY, html_js_1.TAG_ID.TFOOT, html_js_1.TAG_ID.THEAD, html_js_1.TAG_ID.TR]);\nconst defaultParserOptions = {\n  scriptingEnabled: true,\n  sourceCodeLocationInfo: false,\n  treeAdapter: default_js_1.defaultTreeAdapter,\n  onParseError: null\n};\n//Parser\nclass Parser {\n  constructor(options, document) {\n    let fragmentContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let scriptHandler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    this.fragmentContext = fragmentContext;\n    this.scriptHandler = scriptHandler;\n    this.currentToken = null;\n    this.stopped = false;\n    this.insertionMode = InsertionMode.INITIAL;\n    this.originalInsertionMode = InsertionMode.INITIAL;\n    this.headElement = null;\n    this.formElement = null;\n    /** Indicates that the current node is not an element in the HTML namespace */\n    this.currentNotInHTML = false;\n    /**\n     * The template insertion mode stack is maintained from the left.\n     * Ie. the topmost element will always have index 0.\n     */\n    this.tmplInsertionModeStack = [];\n    this.pendingCharacterTokens = [];\n    this.hasNonWhitespacePendingCharacterToken = false;\n    this.framesetOk = true;\n    this.skipNextNewLine = false;\n    this.fosterParentingEnabled = false;\n    this.options = Object.assign(Object.assign({}, defaultParserOptions), options);\n    this.treeAdapter = this.options.treeAdapter;\n    this.onParseError = this.options.onParseError;\n    // Always enable location info if we report parse errors.\n    if (this.onParseError) {\n      this.options.sourceCodeLocationInfo = true;\n    }\n    this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n    this.tokenizer = new index_js_1.Tokenizer(this.options, this);\n    this.activeFormattingElements = new formatting_element_list_js_1.FormattingElementList(this.treeAdapter);\n    this.fragmentContextID = fragmentContext ? (0, html_js_1.getTagID)(this.treeAdapter.getTagName(fragmentContext)) : html_js_1.TAG_ID.UNKNOWN;\n    this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n    this.openElements = new open_element_stack_js_1.OpenElementStack(this.document, this.treeAdapter, this);\n  }\n  // API\n  static parse(html, options) {\n    const parser = new this(options);\n    parser.tokenizer.write(html, true);\n    return parser.document;\n  }\n  static getFragmentParser(fragmentContext, options) {\n    const opts = Object.assign(Object.assign({}, defaultParserOptions), options);\n    //NOTE: use a <template> element as the fragment context if no context element was provided,\n    //so we will parse in a \"forgiving\" manner\n    fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(html_js_1.TAG_NAMES.TEMPLATE, html_js_1.NS.HTML, []);\n    //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n    //This is important for jsdom, where a new `document` cannot be created. This led to\n    //fragment parsing messing with the main `document`.\n    const documentMock = opts.treeAdapter.createElement('documentmock', html_js_1.NS.HTML, []);\n    const parser = new this(opts, documentMock, fragmentContext);\n    if (parser.fragmentContextID === html_js_1.TAG_ID.TEMPLATE) {\n      parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n    }\n    parser._initTokenizerForFragmentParsing();\n    parser._insertFakeRootElement();\n    parser._resetInsertionMode();\n    parser._findFormInFragmentContext();\n    return parser;\n  }\n  getFragment() {\n    const rootElement = this.treeAdapter.getFirstChild(this.document);\n    const fragment = this.treeAdapter.createDocumentFragment();\n    this._adoptNodes(rootElement, fragment);\n    return fragment;\n  }\n  //Errors\n  _err(token, code, beforeToken) {\n    var _a;\n    if (!this.onParseError) return;\n    const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n    const err = {\n      code,\n      startLine: loc.startLine,\n      startCol: loc.startCol,\n      startOffset: loc.startOffset,\n      endLine: beforeToken ? loc.startLine : loc.endLine,\n      endCol: beforeToken ? loc.startCol : loc.endCol,\n      endOffset: beforeToken ? loc.startOffset : loc.endOffset\n    };\n    this.onParseError(err);\n  }\n  //Stack events\n  onItemPush(node, tid, isTop) {\n    var _a, _b;\n    (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n    if (isTop && this.openElements.stackTop > 0) this._setContextModes(node, tid);\n  }\n  onItemPop(node, isTop) {\n    var _a, _b;\n    if (this.options.sourceCodeLocationInfo) {\n      this._setEndLocation(node, this.currentToken);\n    }\n    (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n    if (isTop) {\n      let current;\n      let currentTagId;\n      if (this.openElements.stackTop === 0 && this.fragmentContext) {\n        current = this.fragmentContext;\n        currentTagId = this.fragmentContextID;\n      } else {\n        ({\n          current,\n          currentTagId\n        } = this.openElements);\n      }\n      this._setContextModes(current, currentTagId);\n    }\n  }\n  _setContextModes(current, tid) {\n    const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === html_js_1.NS.HTML;\n    this.currentNotInHTML = !isHTML;\n    this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n  }\n  _switchToTextParsing(currentToken, nextTokenizerState) {\n    this._insertElement(currentToken, html_js_1.NS.HTML);\n    this.tokenizer.state = nextTokenizerState;\n    this.originalInsertionMode = this.insertionMode;\n    this.insertionMode = InsertionMode.TEXT;\n  }\n  switchToPlaintextParsing() {\n    this.insertionMode = InsertionMode.TEXT;\n    this.originalInsertionMode = InsertionMode.IN_BODY;\n    this.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n  }\n  //Fragment parsing\n  _getAdjustedCurrentElement() {\n    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;\n  }\n  _findFormInFragmentContext() {\n    let node = this.fragmentContext;\n    while (node) {\n      if (this.treeAdapter.getTagName(node) === html_js_1.TAG_NAMES.FORM) {\n        this.formElement = node;\n        break;\n      }\n      node = this.treeAdapter.getParentNode(node);\n    }\n  }\n  _initTokenizerForFragmentParsing() {\n    if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== html_js_1.NS.HTML) {\n      return;\n    }\n    switch (this.fragmentContextID) {\n      case html_js_1.TAG_ID.TITLE:\n      case html_js_1.TAG_ID.TEXTAREA:\n        {\n          this.tokenizer.state = index_js_1.TokenizerMode.RCDATA;\n          break;\n        }\n      case html_js_1.TAG_ID.STYLE:\n      case html_js_1.TAG_ID.XMP:\n      case html_js_1.TAG_ID.IFRAME:\n      case html_js_1.TAG_ID.NOEMBED:\n      case html_js_1.TAG_ID.NOFRAMES:\n      case html_js_1.TAG_ID.NOSCRIPT:\n        {\n          this.tokenizer.state = index_js_1.TokenizerMode.RAWTEXT;\n          break;\n        }\n      case html_js_1.TAG_ID.SCRIPT:\n        {\n          this.tokenizer.state = index_js_1.TokenizerMode.SCRIPT_DATA;\n          break;\n        }\n      case html_js_1.TAG_ID.PLAINTEXT:\n        {\n          this.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  //Tree mutation\n  _setDocumentType(token) {\n    const name = token.name || '';\n    const publicId = token.publicId || '';\n    const systemId = token.systemId || '';\n    this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n    if (token.location) {\n      const documentChildren = this.treeAdapter.getChildNodes(this.document);\n      const docTypeNode = documentChildren.find(node => this.treeAdapter.isDocumentTypeNode(node));\n      if (docTypeNode) {\n        this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n      }\n    }\n  }\n  _attachElementToTree(element, location) {\n    if (this.options.sourceCodeLocationInfo) {\n      const loc = location && Object.assign(Object.assign({}, location), {\n        startTag: location\n      });\n      this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n    if (this._shouldFosterParentOnInsertion()) {\n      this._fosterParentElement(element);\n    } else {\n      const parent = this.openElements.currentTmplContentOrNode;\n      this.treeAdapter.appendChild(parent, element);\n    }\n  }\n  _appendElement(token, namespaceURI) {\n    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n    this._attachElementToTree(element, token.location);\n  }\n  _insertElement(token, namespaceURI) {\n    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n    this._attachElementToTree(element, token.location);\n    this.openElements.push(element, token.tagID);\n  }\n  _insertFakeElement(tagName, tagID) {\n    const element = this.treeAdapter.createElement(tagName, html_js_1.NS.HTML, []);\n    this._attachElementToTree(element, null);\n    this.openElements.push(element, tagID);\n  }\n  _insertTemplate(token) {\n    const tmpl = this.treeAdapter.createElement(token.tagName, html_js_1.NS.HTML, token.attrs);\n    const content = this.treeAdapter.createDocumentFragment();\n    this.treeAdapter.setTemplateContent(tmpl, content);\n    this._attachElementToTree(tmpl, token.location);\n    this.openElements.push(tmpl, token.tagID);\n    if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(content, null);\n  }\n  _insertFakeRootElement() {\n    const element = this.treeAdapter.createElement(html_js_1.TAG_NAMES.HTML, html_js_1.NS.HTML, []);\n    if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(element, null);\n    this.treeAdapter.appendChild(this.openElements.current, element);\n    this.openElements.push(element, html_js_1.TAG_ID.HTML);\n  }\n  _appendCommentNode(token, parent) {\n    const commentNode = this.treeAdapter.createCommentNode(token.data);\n    this.treeAdapter.appendChild(parent, commentNode);\n    if (this.options.sourceCodeLocationInfo) {\n      this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n    }\n  }\n  _insertCharacters(token) {\n    let parent;\n    let beforeElement;\n    if (this._shouldFosterParentOnInsertion()) {\n      ({\n        parent,\n        beforeElement\n      } = this._findFosterParentingLocation());\n      if (beforeElement) {\n        this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n      } else {\n        this.treeAdapter.insertText(parent, token.chars);\n      }\n    } else {\n      parent = this.openElements.currentTmplContentOrNode;\n      this.treeAdapter.insertText(parent, token.chars);\n    }\n    if (!token.location) return;\n    const siblings = this.treeAdapter.getChildNodes(parent);\n    const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n    const textNode = siblings[textNodeIdx - 1];\n    //NOTE: if we have a location assigned by another token, then just update the end position\n    const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n    if (tnLoc) {\n      const {\n        endLine,\n        endCol,\n        endOffset\n      } = token.location;\n      this.treeAdapter.updateNodeSourceCodeLocation(textNode, {\n        endLine,\n        endCol,\n        endOffset\n      });\n    } else if (this.options.sourceCodeLocationInfo) {\n      this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n    }\n  }\n  _adoptNodes(donor, recipient) {\n    for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n      this.treeAdapter.detachNode(child);\n      this.treeAdapter.appendChild(recipient, child);\n    }\n  }\n  _setEndLocation(element, closingToken) {\n    if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n      const ctLoc = closingToken.location;\n      const tn = this.treeAdapter.getTagName(element);\n      const endLoc =\n      // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n      // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n      closingToken.type === token_js_1.TokenType.END_TAG && tn === closingToken.tagName ? {\n        endTag: Object.assign({}, ctLoc),\n        endLine: ctLoc.endLine,\n        endCol: ctLoc.endCol,\n        endOffset: ctLoc.endOffset\n      } : {\n        endLine: ctLoc.startLine,\n        endCol: ctLoc.startCol,\n        endOffset: ctLoc.startOffset\n      };\n      this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n    }\n  }\n  //Token processing\n  shouldProcessStartTagTokenInForeignContent(token) {\n    // Check that neither current === document, or ns === NS.HTML\n    if (!this.currentNotInHTML) return false;\n    let current;\n    let currentTagId;\n    if (this.openElements.stackTop === 0 && this.fragmentContext) {\n      current = this.fragmentContext;\n      currentTagId = this.fragmentContextID;\n    } else {\n      ({\n        current,\n        currentTagId\n      } = this.openElements);\n    }\n    if (token.tagID === html_js_1.TAG_ID.SVG && this.treeAdapter.getTagName(current) === html_js_1.TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === html_js_1.NS.MATHML) {\n      return false;\n    }\n    return (\n      // Check that `current` is not an integration point for HTML or MathML elements.\n      this.tokenizer.inForeignNode ||\n      // If it _is_ an integration point, then we might have to check that it is not an HTML\n      // integration point.\n      (token.tagID === html_js_1.TAG_ID.MGLYPH || token.tagID === html_js_1.TAG_ID.MALIGNMARK) && !this._isIntegrationPoint(currentTagId, current, html_js_1.NS.HTML)\n    );\n  }\n  _processToken(token) {\n    switch (token.type) {\n      case token_js_1.TokenType.CHARACTER:\n        {\n          this.onCharacter(token);\n          break;\n        }\n      case token_js_1.TokenType.NULL_CHARACTER:\n        {\n          this.onNullCharacter(token);\n          break;\n        }\n      case token_js_1.TokenType.COMMENT:\n        {\n          this.onComment(token);\n          break;\n        }\n      case token_js_1.TokenType.DOCTYPE:\n        {\n          this.onDoctype(token);\n          break;\n        }\n      case token_js_1.TokenType.START_TAG:\n        {\n          this._processStartTag(token);\n          break;\n        }\n      case token_js_1.TokenType.END_TAG:\n        {\n          this.onEndTag(token);\n          break;\n        }\n      case token_js_1.TokenType.EOF:\n        {\n          this.onEof(token);\n          break;\n        }\n      case token_js_1.TokenType.WHITESPACE_CHARACTER:\n        {\n          this.onWhitespaceCharacter(token);\n          break;\n        }\n    }\n  }\n  //Integration points\n  _isIntegrationPoint(tid, element, foreignNS) {\n    const ns = this.treeAdapter.getNamespaceURI(element);\n    const attrs = this.treeAdapter.getAttrList(element);\n    return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n  }\n  //Active formatting elements reconstruction\n  _reconstructActiveFormattingElements() {\n    const listLength = this.activeFormattingElements.entries.length;\n    if (listLength) {\n      const endIndex = this.activeFormattingElements.entries.findIndex(entry => entry.type === formatting_element_list_js_1.EntryType.Marker || this.openElements.contains(entry.element));\n      const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n      for (let i = unopenIdx; i >= 0; i--) {\n        const entry = this.activeFormattingElements.entries[i];\n        this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n        entry.element = this.openElements.current;\n      }\n    }\n  }\n  //Close elements\n  _closeTableCell() {\n    this.openElements.generateImpliedEndTags();\n    this.openElements.popUntilTableCellPopped();\n    this.activeFormattingElements.clearToLastMarker();\n    this.insertionMode = InsertionMode.IN_ROW;\n  }\n  _closePElement() {\n    this.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.P);\n    this.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.P);\n  }\n  //Insertion modes\n  _resetInsertionMode() {\n    for (let i = this.openElements.stackTop; i >= 0; i--) {\n      //Insertion mode reset map\n      switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n        case html_js_1.TAG_ID.TR:\n          this.insertionMode = InsertionMode.IN_ROW;\n          return;\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TFOOT:\n          this.insertionMode = InsertionMode.IN_TABLE_BODY;\n          return;\n        case html_js_1.TAG_ID.CAPTION:\n          this.insertionMode = InsertionMode.IN_CAPTION;\n          return;\n        case html_js_1.TAG_ID.COLGROUP:\n          this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n          return;\n        case html_js_1.TAG_ID.TABLE:\n          this.insertionMode = InsertionMode.IN_TABLE;\n          return;\n        case html_js_1.TAG_ID.BODY:\n          this.insertionMode = InsertionMode.IN_BODY;\n          return;\n        case html_js_1.TAG_ID.FRAMESET:\n          this.insertionMode = InsertionMode.IN_FRAMESET;\n          return;\n        case html_js_1.TAG_ID.SELECT:\n          this._resetInsertionModeForSelect(i);\n          return;\n        case html_js_1.TAG_ID.TEMPLATE:\n          this.insertionMode = this.tmplInsertionModeStack[0];\n          return;\n        case html_js_1.TAG_ID.HTML:\n          this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n          return;\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n          if (i > 0) {\n            this.insertionMode = InsertionMode.IN_CELL;\n            return;\n          }\n          break;\n        case html_js_1.TAG_ID.HEAD:\n          if (i > 0) {\n            this.insertionMode = InsertionMode.IN_HEAD;\n            return;\n          }\n          break;\n      }\n    }\n    this.insertionMode = InsertionMode.IN_BODY;\n  }\n  _resetInsertionModeForSelect(selectIdx) {\n    if (selectIdx > 0) {\n      for (let i = selectIdx - 1; i > 0; i--) {\n        const tn = this.openElements.tagIDs[i];\n        if (tn === html_js_1.TAG_ID.TEMPLATE) {\n          break;\n        } else if (tn === html_js_1.TAG_ID.TABLE) {\n          this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n          return;\n        }\n      }\n    }\n    this.insertionMode = InsertionMode.IN_SELECT;\n  }\n  //Foster parenting\n  _isElementCausesFosterParenting(tn) {\n    return TABLE_STRUCTURE_TAGS.has(tn);\n  }\n  _shouldFosterParentOnInsertion() {\n    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n  }\n  _findFosterParentingLocation() {\n    for (let i = this.openElements.stackTop; i >= 0; i--) {\n      const openElement = this.openElements.items[i];\n      switch (this.openElements.tagIDs[i]) {\n        case html_js_1.TAG_ID.TEMPLATE:\n          if (this.treeAdapter.getNamespaceURI(openElement) === html_js_1.NS.HTML) {\n            return {\n              parent: this.treeAdapter.getTemplateContent(openElement),\n              beforeElement: null\n            };\n          }\n          break;\n        case html_js_1.TAG_ID.TABLE:\n          {\n            const parent = this.treeAdapter.getParentNode(openElement);\n            if (parent) {\n              return {\n                parent,\n                beforeElement: openElement\n              };\n            }\n            return {\n              parent: this.openElements.items[i - 1],\n              beforeElement: null\n            };\n          }\n        default:\n        // Do nothing\n      }\n    }\n\n    return {\n      parent: this.openElements.items[0],\n      beforeElement: null\n    };\n  }\n  _fosterParentElement(element) {\n    const location = this._findFosterParentingLocation();\n    if (location.beforeElement) {\n      this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n    } else {\n      this.treeAdapter.appendChild(location.parent, element);\n    }\n  }\n  //Special elements\n  _isSpecialElement(element, id) {\n    const ns = this.treeAdapter.getNamespaceURI(element);\n    return html_js_1.SPECIAL_ELEMENTS[ns].has(id);\n  }\n  onCharacter(token) {\n    this.skipNextNewLine = false;\n    if (this.tokenizer.inForeignNode) {\n      characterInForeignContent(this, token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        tokenInInitialMode(this, token);\n        break;\n      case InsertionMode.BEFORE_HTML:\n        tokenBeforeHtml(this, token);\n        break;\n      case InsertionMode.BEFORE_HEAD:\n        tokenBeforeHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD:\n        tokenInHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        tokenInHeadNoScript(this, token);\n        break;\n      case InsertionMode.AFTER_HEAD:\n        tokenAfterHead(this, token);\n        break;\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_TEMPLATE:\n        characterInBody(this, token);\n        break;\n      case InsertionMode.TEXT:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        this._insertCharacters(token);\n        break;\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        characterInTable(this, token);\n        break;\n      case InsertionMode.IN_TABLE_TEXT:\n        characterInTableText(this, token);\n        break;\n      case InsertionMode.IN_COLUMN_GROUP:\n        tokenInColumnGroup(this, token);\n        break;\n      case InsertionMode.AFTER_BODY:\n        tokenAfterBody(this, token);\n        break;\n      case InsertionMode.AFTER_AFTER_BODY:\n        tokenAfterAfterBody(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n\n  onNullCharacter(token) {\n    this.skipNextNewLine = false;\n    if (this.tokenizer.inForeignNode) {\n      nullCharacterInForeignContent(this, token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        tokenInInitialMode(this, token);\n        break;\n      case InsertionMode.BEFORE_HTML:\n        tokenBeforeHtml(this, token);\n        break;\n      case InsertionMode.BEFORE_HEAD:\n        tokenBeforeHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD:\n        tokenInHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        tokenInHeadNoScript(this, token);\n        break;\n      case InsertionMode.AFTER_HEAD:\n        tokenAfterHead(this, token);\n        break;\n      case InsertionMode.TEXT:\n        this._insertCharacters(token);\n        break;\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        characterInTable(this, token);\n        break;\n      case InsertionMode.IN_COLUMN_GROUP:\n        tokenInColumnGroup(this, token);\n        break;\n      case InsertionMode.AFTER_BODY:\n        tokenAfterBody(this, token);\n        break;\n      case InsertionMode.AFTER_AFTER_BODY:\n        tokenAfterAfterBody(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n\n  onComment(token) {\n    this.skipNextNewLine = false;\n    if (this.currentNotInHTML) {\n      appendComment(this, token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n      case InsertionMode.BEFORE_HTML:\n      case InsertionMode.BEFORE_HEAD:\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n      case InsertionMode.IN_TEMPLATE:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n        appendComment(this, token);\n        break;\n      case InsertionMode.IN_TABLE_TEXT:\n        tokenInTableText(this, token);\n        break;\n      case InsertionMode.AFTER_BODY:\n        appendCommentToRootHtmlElement(this, token);\n        break;\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        appendCommentToDocument(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n\n  onDoctype(token) {\n    this.skipNextNewLine = false;\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        doctypeInInitialMode(this, token);\n        break;\n      case InsertionMode.BEFORE_HEAD:\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n        this._err(token, error_codes_js_1.ERR.misplacedDoctype);\n        break;\n      case InsertionMode.IN_TABLE_TEXT:\n        tokenInTableText(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n\n  onStartTag(token) {\n    this.skipNextNewLine = false;\n    this.currentToken = token;\n    this._processStartTag(token);\n    if (token.selfClosing && !token.ackSelfClosing) {\n      this._err(token, error_codes_js_1.ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n    }\n  }\n  /**\n   * Processes a given start tag.\n   *\n   * `onStartTag` checks if a self-closing tag was recognized. When a token\n   * is moved inbetween multiple insertion modes, this check for self-closing\n   * could lead to false positives. To avoid this, `_processStartTag` is used\n   * for nested calls.\n   *\n   * @param token The token to process.\n   */\n  _processStartTag(token) {\n    if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n      startTagInForeignContent(this, token);\n    } else {\n      this._startTagOutsideForeignContent(token);\n    }\n  }\n  _startTagOutsideForeignContent(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        tokenInInitialMode(this, token);\n        break;\n      case InsertionMode.BEFORE_HTML:\n        startTagBeforeHtml(this, token);\n        break;\n      case InsertionMode.BEFORE_HEAD:\n        startTagBeforeHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD:\n        startTagInHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        startTagInHeadNoScript(this, token);\n        break;\n      case InsertionMode.AFTER_HEAD:\n        startTagAfterHead(this, token);\n        break;\n      case InsertionMode.IN_BODY:\n        startTagInBody(this, token);\n        break;\n      case InsertionMode.IN_TABLE:\n        startTagInTable(this, token);\n        break;\n      case InsertionMode.IN_TABLE_TEXT:\n        tokenInTableText(this, token);\n        break;\n      case InsertionMode.IN_CAPTION:\n        startTagInCaption(this, token);\n        break;\n      case InsertionMode.IN_COLUMN_GROUP:\n        startTagInColumnGroup(this, token);\n        break;\n      case InsertionMode.IN_TABLE_BODY:\n        startTagInTableBody(this, token);\n        break;\n      case InsertionMode.IN_ROW:\n        startTagInRow(this, token);\n        break;\n      case InsertionMode.IN_CELL:\n        startTagInCell(this, token);\n        break;\n      case InsertionMode.IN_SELECT:\n        startTagInSelect(this, token);\n        break;\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        startTagInSelectInTable(this, token);\n        break;\n      case InsertionMode.IN_TEMPLATE:\n        startTagInTemplate(this, token);\n        break;\n      case InsertionMode.AFTER_BODY:\n        startTagAfterBody(this, token);\n        break;\n      case InsertionMode.IN_FRAMESET:\n        startTagInFrameset(this, token);\n        break;\n      case InsertionMode.AFTER_FRAMESET:\n        startTagAfterFrameset(this, token);\n        break;\n      case InsertionMode.AFTER_AFTER_BODY:\n        startTagAfterAfterBody(this, token);\n        break;\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        startTagAfterAfterFrameset(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n\n  onEndTag(token) {\n    this.skipNextNewLine = false;\n    this.currentToken = token;\n    if (this.currentNotInHTML) {\n      endTagInForeignContent(this, token);\n    } else {\n      this._endTagOutsideForeignContent(token);\n    }\n  }\n  _endTagOutsideForeignContent(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        tokenInInitialMode(this, token);\n        break;\n      case InsertionMode.BEFORE_HTML:\n        endTagBeforeHtml(this, token);\n        break;\n      case InsertionMode.BEFORE_HEAD:\n        endTagBeforeHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD:\n        endTagInHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        endTagInHeadNoScript(this, token);\n        break;\n      case InsertionMode.AFTER_HEAD:\n        endTagAfterHead(this, token);\n        break;\n      case InsertionMode.IN_BODY:\n        endTagInBody(this, token);\n        break;\n      case InsertionMode.TEXT:\n        endTagInText(this, token);\n        break;\n      case InsertionMode.IN_TABLE:\n        endTagInTable(this, token);\n        break;\n      case InsertionMode.IN_TABLE_TEXT:\n        tokenInTableText(this, token);\n        break;\n      case InsertionMode.IN_CAPTION:\n        endTagInCaption(this, token);\n        break;\n      case InsertionMode.IN_COLUMN_GROUP:\n        endTagInColumnGroup(this, token);\n        break;\n      case InsertionMode.IN_TABLE_BODY:\n        endTagInTableBody(this, token);\n        break;\n      case InsertionMode.IN_ROW:\n        endTagInRow(this, token);\n        break;\n      case InsertionMode.IN_CELL:\n        endTagInCell(this, token);\n        break;\n      case InsertionMode.IN_SELECT:\n        endTagInSelect(this, token);\n        break;\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        endTagInSelectInTable(this, token);\n        break;\n      case InsertionMode.IN_TEMPLATE:\n        endTagInTemplate(this, token);\n        break;\n      case InsertionMode.AFTER_BODY:\n        endTagAfterBody(this, token);\n        break;\n      case InsertionMode.IN_FRAMESET:\n        endTagInFrameset(this, token);\n        break;\n      case InsertionMode.AFTER_FRAMESET:\n        endTagAfterFrameset(this, token);\n        break;\n      case InsertionMode.AFTER_AFTER_BODY:\n        tokenAfterAfterBody(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n\n  onEof(token) {\n    switch (this.insertionMode) {\n      case InsertionMode.INITIAL:\n        tokenInInitialMode(this, token);\n        break;\n      case InsertionMode.BEFORE_HTML:\n        tokenBeforeHtml(this, token);\n        break;\n      case InsertionMode.BEFORE_HEAD:\n        tokenBeforeHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD:\n        tokenInHead(this, token);\n        break;\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n        tokenInHeadNoScript(this, token);\n        break;\n      case InsertionMode.AFTER_HEAD:\n        tokenAfterHead(this, token);\n        break;\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n        eofInBody(this, token);\n        break;\n      case InsertionMode.TEXT:\n        eofInText(this, token);\n        break;\n      case InsertionMode.IN_TABLE_TEXT:\n        tokenInTableText(this, token);\n        break;\n      case InsertionMode.IN_TEMPLATE:\n        eofInTemplate(this, token);\n        break;\n      case InsertionMode.AFTER_BODY:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        stopParsing(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n\n  onWhitespaceCharacter(token) {\n    if (this.skipNextNewLine) {\n      this.skipNextNewLine = false;\n      if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n        if (token.chars.length === 1) {\n          return;\n        }\n        token.chars = token.chars.substr(1);\n      }\n    }\n    if (this.tokenizer.inForeignNode) {\n      this._insertCharacters(token);\n      return;\n    }\n    switch (this.insertionMode) {\n      case InsertionMode.IN_HEAD:\n      case InsertionMode.IN_HEAD_NO_SCRIPT:\n      case InsertionMode.AFTER_HEAD:\n      case InsertionMode.TEXT:\n      case InsertionMode.IN_COLUMN_GROUP:\n      case InsertionMode.IN_SELECT:\n      case InsertionMode.IN_SELECT_IN_TABLE:\n      case InsertionMode.IN_FRAMESET:\n      case InsertionMode.AFTER_FRAMESET:\n        this._insertCharacters(token);\n        break;\n      case InsertionMode.IN_BODY:\n      case InsertionMode.IN_CAPTION:\n      case InsertionMode.IN_CELL:\n      case InsertionMode.IN_TEMPLATE:\n      case InsertionMode.AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_BODY:\n      case InsertionMode.AFTER_AFTER_FRAMESET:\n        whitespaceCharacterInBody(this, token);\n        break;\n      case InsertionMode.IN_TABLE:\n      case InsertionMode.IN_TABLE_BODY:\n      case InsertionMode.IN_ROW:\n        characterInTable(this, token);\n        break;\n      case InsertionMode.IN_TABLE_TEXT:\n        whitespaceCharacterInTableText(this, token);\n        break;\n      default:\n      // Do nothing\n    }\n  }\n}\n\nexports.Parser = Parser;\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n  let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n  if (formattingElementEntry) {\n    if (!p.openElements.contains(formattingElementEntry.element)) {\n      p.activeFormattingElements.removeEntry(formattingElementEntry);\n      formattingElementEntry = null;\n    } else if (!p.openElements.hasInScope(token.tagID)) {\n      formattingElementEntry = null;\n    }\n  } else {\n    genericEndTagInBody(p, token);\n  }\n  return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n  let furthestBlock = null;\n  let idx = p.openElements.stackTop;\n  for (; idx >= 0; idx--) {\n    const element = p.openElements.items[idx];\n    if (element === formattingElementEntry.element) {\n      break;\n    }\n    if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n      furthestBlock = element;\n    }\n  }\n  if (!furthestBlock) {\n    p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n  }\n  return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n  let lastElement = furthestBlock;\n  let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n  for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n    //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n    nextElement = p.openElements.getCommonAncestor(element);\n    const elementEntry = p.activeFormattingElements.getElementEntry(element);\n    const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n    const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n    if (shouldRemoveFromOpenElements) {\n      if (counterOverflow) {\n        p.activeFormattingElements.removeEntry(elementEntry);\n      }\n      p.openElements.remove(element);\n    } else {\n      element = aaRecreateElementFromEntry(p, elementEntry);\n      if (lastElement === furthestBlock) {\n        p.activeFormattingElements.bookmark = elementEntry;\n      }\n      p.treeAdapter.detachNode(lastElement);\n      p.treeAdapter.appendChild(element, lastElement);\n      lastElement = element;\n    }\n  }\n  return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n  const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n  const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n  p.openElements.replace(elementEntry.element, newElement);\n  elementEntry.element = newElement;\n  return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n  const tn = p.treeAdapter.getTagName(commonAncestor);\n  const tid = (0, html_js_1.getTagID)(tn);\n  if (p._isElementCausesFosterParenting(tid)) {\n    p._fosterParentElement(lastElement);\n  } else {\n    const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n    if (tid === html_js_1.TAG_ID.TEMPLATE && ns === html_js_1.NS.HTML) {\n      commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n    }\n    p.treeAdapter.appendChild(commonAncestor, lastElement);\n  }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n  const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n  const {\n    token\n  } = formattingElementEntry;\n  const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n  p._adoptNodes(furthestBlock, newElement);\n  p.treeAdapter.appendChild(furthestBlock, newElement);\n  p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n  p.activeFormattingElements.removeEntry(formattingElementEntry);\n  p.openElements.remove(formattingElementEntry.element);\n  p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n  for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n    const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n    if (!formattingElementEntry) {\n      break;\n    }\n    const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n    if (!furthestBlock) {\n      break;\n    }\n    p.activeFormattingElements.bookmark = formattingElementEntry;\n    const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n    const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n    p.treeAdapter.detachNode(lastElement);\n    if (commonAncestor) aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n  }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n  p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n  p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n  p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n  p.stopped = true;\n  // NOTE: Set end locations for elements that remain on the open element stack.\n  if (token.location) {\n    // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n    // This is a problem, as we might overwrite their end position here.\n    const target = p.fragmentContext ? 0 : 2;\n    for (let i = p.openElements.stackTop; i >= target; i--) {\n      p._setEndLocation(p.openElements.items[i], token);\n    }\n    // Handle `html` and `body`\n    if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n      const htmlElement = p.openElements.items[0];\n      const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n      if (htmlLocation && !htmlLocation.endTag) {\n        p._setEndLocation(htmlElement, token);\n        if (p.openElements.stackTop >= 1) {\n          const bodyElement = p.openElements.items[1];\n          const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n          if (bodyLocation && !bodyLocation.endTag) {\n            p._setEndLocation(bodyElement, token);\n          }\n        }\n      }\n    }\n  }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n  p._setDocumentType(token);\n  const mode = token.forceQuirks ? html_js_1.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n  if (!doctype.isConforming(token)) {\n    p._err(token, error_codes_js_1.ERR.nonConformingDoctype);\n  }\n  p.treeAdapter.setDocumentMode(p.document, mode);\n  p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n  p._err(token, error_codes_js_1.ERR.missingDoctype, true);\n  p.treeAdapter.setDocumentMode(p.document, html_js_1.DOCUMENT_MODE.QUIRKS);\n  p.insertionMode = InsertionMode.BEFORE_HTML;\n  p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n  if (token.tagID === html_js_1.TAG_ID.HTML) {\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n  } else {\n    tokenBeforeHtml(p, token);\n  }\n}\nfunction endTagBeforeHtml(p, token) {\n  const tn = token.tagID;\n  if (tn === html_js_1.TAG_ID.HTML || tn === html_js_1.TAG_ID.HEAD || tn === html_js_1.TAG_ID.BODY || tn === html_js_1.TAG_ID.BR) {\n    tokenBeforeHtml(p, token);\n  }\n}\nfunction tokenBeforeHtml(p, token) {\n  p._insertFakeRootElement();\n  p.insertionMode = InsertionMode.BEFORE_HEAD;\n  p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.HEAD:\n      {\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.headElement = p.openElements.current;\n        p.insertionMode = InsertionMode.IN_HEAD;\n        break;\n      }\n    default:\n      {\n        tokenBeforeHead(p, token);\n      }\n  }\n}\nfunction endTagBeforeHead(p, token) {\n  const tn = token.tagID;\n  if (tn === html_js_1.TAG_ID.HEAD || tn === html_js_1.TAG_ID.BODY || tn === html_js_1.TAG_ID.HTML || tn === html_js_1.TAG_ID.BR) {\n    tokenBeforeHead(p, token);\n  } else {\n    p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n  }\n}\nfunction tokenBeforeHead(p, token) {\n  p._insertFakeElement(html_js_1.TAG_NAMES.HEAD, html_js_1.TAG_ID.HEAD);\n  p.headElement = p.openElements.current;\n  p.insertionMode = InsertionMode.IN_HEAD;\n  p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BASE:\n    case html_js_1.TAG_ID.BASEFONT:\n    case html_js_1.TAG_ID.BGSOUND:\n    case html_js_1.TAG_ID.LINK:\n    case html_js_1.TAG_ID.META:\n      {\n        p._appendElement(token, html_js_1.NS.HTML);\n        token.ackSelfClosing = true;\n        break;\n      }\n    case html_js_1.TAG_ID.TITLE:\n      {\n        p._switchToTextParsing(token, index_js_1.TokenizerMode.RCDATA);\n        break;\n      }\n    case html_js_1.TAG_ID.NOSCRIPT:\n      {\n        if (p.options.scriptingEnabled) {\n          p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n        } else {\n          p._insertElement(token, html_js_1.NS.HTML);\n          p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.NOFRAMES:\n    case html_js_1.TAG_ID.STYLE:\n      {\n        p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n        break;\n      }\n    case html_js_1.TAG_ID.SCRIPT:\n      {\n        p._switchToTextParsing(token, index_js_1.TokenizerMode.SCRIPT_DATA);\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        p._insertTemplate(token);\n        p.activeFormattingElements.insertMarker();\n        p.framesetOk = false;\n        p.insertionMode = InsertionMode.IN_TEMPLATE;\n        p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        break;\n      }\n    case html_js_1.TAG_ID.HEAD:\n      {\n        p._err(token, error_codes_js_1.ERR.misplacedStartTagForHeadElement);\n        break;\n      }\n    default:\n      {\n        tokenInHead(p, token);\n      }\n  }\n}\nfunction endTagInHead(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HEAD:\n      {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.AFTER_HEAD;\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n    case html_js_1.TAG_ID.BR:\n    case html_js_1.TAG_ID.HTML:\n      {\n        tokenInHead(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\nfunction templateEndTagInHead(p, token) {\n  if (p.openElements.tmplCount > 0) {\n    p.openElements.generateImpliedEndTagsThoroughly();\n    if (p.openElements.currentTagId !== html_js_1.TAG_ID.TEMPLATE) {\n      p._err(token, error_codes_js_1.ERR.closingOfElementWithOpenChildElements);\n    }\n    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TEMPLATE);\n    p.activeFormattingElements.clearToLastMarker();\n    p.tmplInsertionModeStack.shift();\n    p._resetInsertionMode();\n  } else {\n    p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n  }\n}\nfunction tokenInHead(p, token) {\n  p.openElements.pop();\n  p.insertionMode = InsertionMode.AFTER_HEAD;\n  p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BASEFONT:\n    case html_js_1.TAG_ID.BGSOUND:\n    case html_js_1.TAG_ID.HEAD:\n    case html_js_1.TAG_ID.LINK:\n    case html_js_1.TAG_ID.META:\n    case html_js_1.TAG_ID.NOFRAMES:\n    case html_js_1.TAG_ID.STYLE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.NOSCRIPT:\n      {\n        p._err(token, error_codes_js_1.ERR.nestedNoscriptInHead);\n        break;\n      }\n    default:\n      {\n        tokenInHeadNoScript(p, token);\n      }\n  }\n}\nfunction endTagInHeadNoScript(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.NOSCRIPT:\n      {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_HEAD;\n        break;\n      }\n    case html_js_1.TAG_ID.BR:\n      {\n        tokenInHeadNoScript(p, token);\n        break;\n      }\n    default:\n      {\n        p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\nfunction tokenInHeadNoScript(p, token) {\n  const errCode = token.type === token_js_1.TokenType.EOF ? error_codes_js_1.ERR.openElementsLeftAfterEof : error_codes_js_1.ERR.disallowedContentInNoscriptInHead;\n  p._err(token, errCode);\n  p.openElements.pop();\n  p.insertionMode = InsertionMode.IN_HEAD;\n  p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n      {\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.framesetOk = false;\n        p.insertionMode = InsertionMode.IN_BODY;\n        break;\n      }\n    case html_js_1.TAG_ID.FRAMESET:\n      {\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n        break;\n      }\n    case html_js_1.TAG_ID.BASE:\n    case html_js_1.TAG_ID.BASEFONT:\n    case html_js_1.TAG_ID.BGSOUND:\n    case html_js_1.TAG_ID.LINK:\n    case html_js_1.TAG_ID.META:\n    case html_js_1.TAG_ID.NOFRAMES:\n    case html_js_1.TAG_ID.SCRIPT:\n    case html_js_1.TAG_ID.STYLE:\n    case html_js_1.TAG_ID.TEMPLATE:\n    case html_js_1.TAG_ID.TITLE:\n      {\n        p._err(token, error_codes_js_1.ERR.abandonedHeadElementChild);\n        p.openElements.push(p.headElement, html_js_1.TAG_ID.HEAD);\n        startTagInHead(p, token);\n        p.openElements.remove(p.headElement);\n        break;\n      }\n    case html_js_1.TAG_ID.HEAD:\n      {\n        p._err(token, error_codes_js_1.ERR.misplacedStartTagForHeadElement);\n        break;\n      }\n    default:\n      {\n        tokenAfterHead(p, token);\n      }\n  }\n}\nfunction endTagAfterHead(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.BODY:\n    case html_js_1.TAG_ID.HTML:\n    case html_js_1.TAG_ID.BR:\n      {\n        tokenAfterHead(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n      }\n  }\n}\nfunction tokenAfterHead(p, token) {\n  p._insertFakeElement(html_js_1.TAG_NAMES.BODY, html_js_1.TAG_ID.BODY);\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n  switch (token.type) {\n    case token_js_1.TokenType.CHARACTER:\n      {\n        characterInBody(p, token);\n        break;\n      }\n    case token_js_1.TokenType.WHITESPACE_CHARACTER:\n      {\n        whitespaceCharacterInBody(p, token);\n        break;\n      }\n    case token_js_1.TokenType.COMMENT:\n      {\n        appendComment(p, token);\n        break;\n      }\n    case token_js_1.TokenType.START_TAG:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case token_js_1.TokenType.END_TAG:\n      {\n        endTagInBody(p, token);\n        break;\n      }\n    case token_js_1.TokenType.EOF:\n      {\n        eofInBody(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n\nfunction whitespaceCharacterInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertCharacters(token);\n  p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n  if (p.openElements.tmplCount === 0) {\n    p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n  }\n}\nfunction bodyStartTagInBody(p, token) {\n  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n  if (bodyElement && p.openElements.tmplCount === 0) {\n    p.framesetOk = false;\n    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n  }\n}\nfunction framesetStartTagInBody(p, token) {\n  const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n  if (p.framesetOk && bodyElement) {\n    p.treeAdapter.detachNode(bodyElement);\n    p.openElements.popAllUpToHtmlElement();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.IN_FRAMESET;\n  }\n}\nfunction addressStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  if ((0, html_js_1.isNumberedHeader)(p.openElements.currentTagId)) {\n    p.openElements.pop();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n  //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n  //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n  p.skipNextNewLine = true;\n  p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n  const inTemplate = p.openElements.tmplCount > 0;\n  if (!p.formElement || inTemplate) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n      p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    if (!inTemplate) {\n      p.formElement = p.openElements.current;\n    }\n  }\n}\nfunction listItemStartTagInBody(p, token) {\n  p.framesetOk = false;\n  const tn = token.tagID;\n  for (let i = p.openElements.stackTop; i >= 0; i--) {\n    const elementId = p.openElements.tagIDs[i];\n    if (tn === html_js_1.TAG_ID.LI && elementId === html_js_1.TAG_ID.LI || (tn === html_js_1.TAG_ID.DD || tn === html_js_1.TAG_ID.DT) && (elementId === html_js_1.TAG_ID.DD || elementId === html_js_1.TAG_ID.DT)) {\n      p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n      p.openElements.popUntilTagNamePopped(elementId);\n      break;\n    }\n    if (elementId !== html_js_1.TAG_ID.ADDRESS && elementId !== html_js_1.TAG_ID.DIV && elementId !== html_js_1.TAG_ID.P && p._isSpecialElement(p.openElements.items[i], elementId)) {\n      break;\n    }\n  }\n  if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n  if (p.openElements.hasInScope(html_js_1.TAG_ID.BUTTON)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.BUTTON);\n  }\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n  const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(html_js_1.TAG_NAMES.A);\n  if (activeElementEntry) {\n    callAdoptionAgency(p, token);\n    p.openElements.remove(activeElementEntry.element);\n    p.activeFormattingElements.removeEntry(activeElementEntry);\n  }\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  if (p.openElements.hasInScope(html_js_1.TAG_ID.NOBR)) {\n    callAdoptionAgency(p, token);\n    p._reconstructActiveFormattingElements();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.activeFormattingElements.insertMarker();\n  p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n  if (p.treeAdapter.getDocumentMode(p.document) !== html_js_1.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.framesetOk = false;\n  p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._appendElement(token, html_js_1.NS.HTML);\n  p.framesetOk = false;\n  token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n  const inputType = (0, token_js_1.getTokenAttr)(token, html_js_1.ATTRS.TYPE);\n  return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._appendElement(token, html_js_1.NS.HTML);\n  if (!isHiddenInput(token)) {\n    p.framesetOk = false;\n  }\n  token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n  p._appendElement(token, html_js_1.NS.HTML);\n  token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  p._appendElement(token, html_js_1.NS.HTML);\n  p.framesetOk = false;\n  token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n  token.tagName = html_js_1.TAG_NAMES.IMG;\n  token.tagID = html_js_1.TAG_ID.IMG;\n  areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n  p._insertElement(token, html_js_1.NS.HTML);\n  //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n  //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n  p.skipNextNewLine = true;\n  p.tokenizer.state = index_js_1.TokenizerMode.RCDATA;\n  p.originalInsertionMode = p.insertionMode;\n  p.framesetOk = false;\n  p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n  if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._closePElement();\n  }\n  p._reconstructActiveFormattingElements();\n  p.framesetOk = false;\n  p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n  p.framesetOk = false;\n  p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as rawtext.\nfunction noembedStartTagInBody(p, token) {\n  p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.framesetOk = false;\n  p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n  if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n    p.openElements.pop();\n  }\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n  if (p.openElements.hasInScope(html_js_1.TAG_ID.RUBY)) {\n    p.openElements.generateImpliedEndTags();\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n  if (p.openElements.hasInScope(html_js_1.TAG_ID.RUBY)) {\n    p.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.RTC);\n  }\n  p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  foreignContent.adjustTokenMathMLAttrs(token);\n  foreignContent.adjustTokenXMLAttrs(token);\n  if (token.selfClosing) {\n    p._appendElement(token, html_js_1.NS.MATHML);\n  } else {\n    p._insertElement(token, html_js_1.NS.MATHML);\n  }\n  token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  foreignContent.adjustTokenSVGAttrs(token);\n  foreignContent.adjustTokenXMLAttrs(token);\n  if (token.selfClosing) {\n    p._appendElement(token, html_js_1.NS.SVG);\n  } else {\n    p._insertElement(token, html_js_1.NS.SVG);\n  }\n  token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n  p._reconstructActiveFormattingElements();\n  p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction startTagInBody(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.I:\n    case html_js_1.TAG_ID.S:\n    case html_js_1.TAG_ID.B:\n    case html_js_1.TAG_ID.U:\n    case html_js_1.TAG_ID.EM:\n    case html_js_1.TAG_ID.TT:\n    case html_js_1.TAG_ID.BIG:\n    case html_js_1.TAG_ID.CODE:\n    case html_js_1.TAG_ID.FONT:\n    case html_js_1.TAG_ID.SMALL:\n    case html_js_1.TAG_ID.STRIKE:\n    case html_js_1.TAG_ID.STRONG:\n      {\n        bStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.A:\n      {\n        aStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.H1:\n    case html_js_1.TAG_ID.H2:\n    case html_js_1.TAG_ID.H3:\n    case html_js_1.TAG_ID.H4:\n    case html_js_1.TAG_ID.H5:\n    case html_js_1.TAG_ID.H6:\n      {\n        numberedHeaderStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.P:\n    case html_js_1.TAG_ID.DL:\n    case html_js_1.TAG_ID.OL:\n    case html_js_1.TAG_ID.UL:\n    case html_js_1.TAG_ID.DIV:\n    case html_js_1.TAG_ID.DIR:\n    case html_js_1.TAG_ID.NAV:\n    case html_js_1.TAG_ID.MAIN:\n    case html_js_1.TAG_ID.MENU:\n    case html_js_1.TAG_ID.ASIDE:\n    case html_js_1.TAG_ID.CENTER:\n    case html_js_1.TAG_ID.FIGURE:\n    case html_js_1.TAG_ID.FOOTER:\n    case html_js_1.TAG_ID.HEADER:\n    case html_js_1.TAG_ID.HGROUP:\n    case html_js_1.TAG_ID.DIALOG:\n    case html_js_1.TAG_ID.DETAILS:\n    case html_js_1.TAG_ID.ADDRESS:\n    case html_js_1.TAG_ID.ARTICLE:\n    case html_js_1.TAG_ID.SECTION:\n    case html_js_1.TAG_ID.SUMMARY:\n    case html_js_1.TAG_ID.FIELDSET:\n    case html_js_1.TAG_ID.BLOCKQUOTE:\n    case html_js_1.TAG_ID.FIGCAPTION:\n      {\n        addressStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.LI:\n    case html_js_1.TAG_ID.DD:\n    case html_js_1.TAG_ID.DT:\n      {\n        listItemStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BR:\n    case html_js_1.TAG_ID.IMG:\n    case html_js_1.TAG_ID.WBR:\n    case html_js_1.TAG_ID.AREA:\n    case html_js_1.TAG_ID.EMBED:\n    case html_js_1.TAG_ID.KEYGEN:\n      {\n        areaStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.HR:\n      {\n        hrStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.RB:\n    case html_js_1.TAG_ID.RTC:\n      {\n        rbStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.RT:\n    case html_js_1.TAG_ID.RP:\n      {\n        rtStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.PRE:\n    case html_js_1.TAG_ID.LISTING:\n      {\n        preStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.XMP:\n      {\n        xmpStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.SVG:\n      {\n        svgStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.HTML:\n      {\n        htmlStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BASE:\n    case html_js_1.TAG_ID.LINK:\n    case html_js_1.TAG_ID.META:\n    case html_js_1.TAG_ID.STYLE:\n    case html_js_1.TAG_ID.TITLE:\n    case html_js_1.TAG_ID.SCRIPT:\n    case html_js_1.TAG_ID.BGSOUND:\n    case html_js_1.TAG_ID.BASEFONT:\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n      {\n        bodyStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.FORM:\n      {\n        formStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.NOBR:\n      {\n        nobrStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.MATH:\n      {\n        mathStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.TABLE:\n      {\n        tableStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.INPUT:\n      {\n        inputStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.PARAM:\n    case html_js_1.TAG_ID.TRACK:\n    case html_js_1.TAG_ID.SOURCE:\n      {\n        paramStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.IMAGE:\n      {\n        imageStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BUTTON:\n      {\n        buttonStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.APPLET:\n    case html_js_1.TAG_ID.OBJECT:\n    case html_js_1.TAG_ID.MARQUEE:\n      {\n        appletStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.IFRAME:\n      {\n        iframeStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.SELECT:\n      {\n        selectStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.OPTION:\n    case html_js_1.TAG_ID.OPTGROUP:\n      {\n        optgroupStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.NOEMBED:\n      {\n        noembedStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.FRAMESET:\n      {\n        framesetStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.TEXTAREA:\n      {\n        textareaStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.NOSCRIPT:\n      {\n        if (p.options.scriptingEnabled) {\n          noembedStartTagInBody(p, token);\n        } else {\n          genericStartTagInBody(p, token);\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.PLAINTEXT:\n      {\n        plaintextStartTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.TH:\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TR:\n    case html_js_1.TAG_ID.HEAD:\n    case html_js_1.TAG_ID.FRAME:\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COLGROUP:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        genericStartTagInBody(p, token);\n      }\n  }\n}\nfunction bodyEndTagInBody(p, token) {\n  if (p.openElements.hasInScope(html_js_1.TAG_ID.BODY)) {\n    p.insertionMode = InsertionMode.AFTER_BODY;\n    //NOTE: <body> is never popped from the stack, so we need to updated\n    //the end location explicitly.\n    if (p.options.sourceCodeLocationInfo) {\n      const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n      if (bodyElement) {\n        p._setEndLocation(bodyElement, token);\n      }\n    }\n  }\n}\nfunction htmlEndTagInBody(p, token) {\n  if (p.openElements.hasInScope(html_js_1.TAG_ID.BODY)) {\n    p.insertionMode = InsertionMode.AFTER_BODY;\n    endTagAfterBody(p, token);\n  }\n}\nfunction addressEndTagInBody(p, token) {\n  const tn = token.tagID;\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped(tn);\n  }\n}\nfunction formEndTagInBody(p) {\n  const inTemplate = p.openElements.tmplCount > 0;\n  const {\n    formElement\n  } = p;\n  if (!inTemplate) {\n    p.formElement = null;\n  }\n  if ((formElement || inTemplate) && p.openElements.hasInScope(html_js_1.TAG_ID.FORM)) {\n    p.openElements.generateImpliedEndTags();\n    if (inTemplate) {\n      p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.FORM);\n    } else if (formElement) {\n      p.openElements.remove(formElement);\n    }\n  }\n}\nfunction pEndTagInBody(p) {\n  if (!p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n    p._insertFakeElement(html_js_1.TAG_NAMES.P, html_js_1.TAG_ID.P);\n  }\n  p._closePElement();\n}\nfunction liEndTagInBody(p) {\n  if (p.openElements.hasInListItemScope(html_js_1.TAG_ID.LI)) {\n    p.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.LI);\n    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.LI);\n  }\n}\nfunction ddEndTagInBody(p, token) {\n  const tn = token.tagID;\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTagsWithExclusion(tn);\n    p.openElements.popUntilTagNamePopped(tn);\n  }\n}\nfunction numberedHeaderEndTagInBody(p) {\n  if (p.openElements.hasNumberedHeaderInScope()) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilNumberedHeaderPopped();\n  }\n}\nfunction appletEndTagInBody(p, token) {\n  const tn = token.tagID;\n  if (p.openElements.hasInScope(tn)) {\n    p.openElements.generateImpliedEndTags();\n    p.openElements.popUntilTagNamePopped(tn);\n    p.activeFormattingElements.clearToLastMarker();\n  }\n}\nfunction brEndTagInBody(p) {\n  p._reconstructActiveFormattingElements();\n  p._insertFakeElement(html_js_1.TAG_NAMES.BR, html_js_1.TAG_ID.BR);\n  p.openElements.pop();\n  p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n  const tn = token.tagName;\n  const tid = token.tagID;\n  for (let i = p.openElements.stackTop; i > 0; i--) {\n    const element = p.openElements.items[i];\n    const elementId = p.openElements.tagIDs[i];\n    // Compare the tag name here, as the tag might not be a known tag with an ID.\n    if (tid === elementId && (tid !== html_js_1.TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n      p.openElements.generateImpliedEndTagsWithExclusion(tid);\n      if (p.openElements.stackTop >= i) p.openElements.shortenToLength(i);\n      break;\n    }\n    if (p._isSpecialElement(element, elementId)) {\n      break;\n    }\n  }\n}\nfunction endTagInBody(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.A:\n    case html_js_1.TAG_ID.B:\n    case html_js_1.TAG_ID.I:\n    case html_js_1.TAG_ID.S:\n    case html_js_1.TAG_ID.U:\n    case html_js_1.TAG_ID.EM:\n    case html_js_1.TAG_ID.TT:\n    case html_js_1.TAG_ID.BIG:\n    case html_js_1.TAG_ID.CODE:\n    case html_js_1.TAG_ID.FONT:\n    case html_js_1.TAG_ID.NOBR:\n    case html_js_1.TAG_ID.SMALL:\n    case html_js_1.TAG_ID.STRIKE:\n    case html_js_1.TAG_ID.STRONG:\n      {\n        callAdoptionAgency(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.P:\n      {\n        pEndTagInBody(p);\n        break;\n      }\n    case html_js_1.TAG_ID.DL:\n    case html_js_1.TAG_ID.UL:\n    case html_js_1.TAG_ID.OL:\n    case html_js_1.TAG_ID.DIR:\n    case html_js_1.TAG_ID.DIV:\n    case html_js_1.TAG_ID.NAV:\n    case html_js_1.TAG_ID.PRE:\n    case html_js_1.TAG_ID.MAIN:\n    case html_js_1.TAG_ID.MENU:\n    case html_js_1.TAG_ID.ASIDE:\n    case html_js_1.TAG_ID.BUTTON:\n    case html_js_1.TAG_ID.CENTER:\n    case html_js_1.TAG_ID.FIGURE:\n    case html_js_1.TAG_ID.FOOTER:\n    case html_js_1.TAG_ID.HEADER:\n    case html_js_1.TAG_ID.HGROUP:\n    case html_js_1.TAG_ID.DIALOG:\n    case html_js_1.TAG_ID.ADDRESS:\n    case html_js_1.TAG_ID.ARTICLE:\n    case html_js_1.TAG_ID.DETAILS:\n    case html_js_1.TAG_ID.SECTION:\n    case html_js_1.TAG_ID.SUMMARY:\n    case html_js_1.TAG_ID.LISTING:\n    case html_js_1.TAG_ID.FIELDSET:\n    case html_js_1.TAG_ID.BLOCKQUOTE:\n    case html_js_1.TAG_ID.FIGCAPTION:\n      {\n        addressEndTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.LI:\n      {\n        liEndTagInBody(p);\n        break;\n      }\n    case html_js_1.TAG_ID.DD:\n    case html_js_1.TAG_ID.DT:\n      {\n        ddEndTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.H1:\n    case html_js_1.TAG_ID.H2:\n    case html_js_1.TAG_ID.H3:\n    case html_js_1.TAG_ID.H4:\n    case html_js_1.TAG_ID.H5:\n    case html_js_1.TAG_ID.H6:\n      {\n        numberedHeaderEndTagInBody(p);\n        break;\n      }\n    case html_js_1.TAG_ID.BR:\n      {\n        brEndTagInBody(p);\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n      {\n        bodyEndTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.HTML:\n      {\n        htmlEndTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.FORM:\n      {\n        formEndTagInBody(p);\n        break;\n      }\n    case html_js_1.TAG_ID.APPLET:\n    case html_js_1.TAG_ID.OBJECT:\n    case html_js_1.TAG_ID.MARQUEE:\n      {\n        appletEndTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        genericEndTagInBody(p, token);\n      }\n  }\n}\nfunction eofInBody(p, token) {\n  if (p.tmplInsertionModeStack.length > 0) {\n    eofInTemplate(p, token);\n  } else {\n    stopParsing(p, token);\n  }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n  var _a;\n  if (token.tagID === html_js_1.TAG_ID.SCRIPT) {\n    (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n  }\n  p.openElements.pop();\n  p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n  p._err(token, error_codes_js_1.ERR.eofInElementThatCanContainOnlyText);\n  p.openElements.pop();\n  p.insertionMode = p.originalInsertionMode;\n  p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n  if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n    p.pendingCharacterTokens.length = 0;\n    p.hasNonWhitespacePendingCharacterToken = false;\n    p.originalInsertionMode = p.insertionMode;\n    p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n    switch (token.type) {\n      case token_js_1.TokenType.CHARACTER:\n        {\n          characterInTableText(p, token);\n          break;\n        }\n      case token_js_1.TokenType.WHITESPACE_CHARACTER:\n        {\n          whitespaceCharacterInTableText(p, token);\n          break;\n        }\n      // Ignore null\n    }\n  } else {\n    tokenInTable(p, token);\n  }\n}\nfunction captionStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p.activeFormattingElements.insertMarker();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertFakeElement(html_js_1.TAG_NAMES.COLGROUP, html_js_1.TAG_ID.COLGROUP);\n  p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n  startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertElement(token, html_js_1.NS.HTML);\n  p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n  p.openElements.clearBackToTableContext();\n  p._insertFakeElement(html_js_1.TAG_NAMES.TBODY, html_js_1.TAG_ID.TBODY);\n  p.insertionMode = InsertionMode.IN_TABLE_BODY;\n  startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n  if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TABLE)) {\n    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TABLE);\n    p._resetInsertionMode();\n    p._processStartTag(token);\n  }\n}\nfunction inputStartTagInTable(p, token) {\n  if (isHiddenInput(token)) {\n    p._appendElement(token, html_js_1.NS.HTML);\n  } else {\n    tokenInTable(p, token);\n  }\n  token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n  if (!p.formElement && p.openElements.tmplCount === 0) {\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.formElement = p.openElements.current;\n    p.openElements.pop();\n  }\n}\nfunction startTagInTable(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TH:\n    case html_js_1.TAG_ID.TR:\n      {\n        tdStartTagInTable(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.STYLE:\n    case html_js_1.TAG_ID.SCRIPT:\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.COL:\n      {\n        colStartTagInTable(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.FORM:\n      {\n        formStartTagInTable(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.TABLE:\n      {\n        tableStartTagInTable(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n      {\n        tbodyStartTagInTable(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.INPUT:\n      {\n        inputStartTagInTable(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.CAPTION:\n      {\n        captionStartTagInTable(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.COLGROUP:\n      {\n        colgroupStartTagInTable(p, token);\n        break;\n      }\n    default:\n      {\n        tokenInTable(p, token);\n      }\n  }\n}\nfunction endTagInTable(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.TABLE:\n      {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TABLE)) {\n          p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TABLE);\n          p._resetInsertionMode();\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.HTML:\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.TH:\n    case html_js_1.TAG_ID.THEAD:\n    case html_js_1.TAG_ID.TR:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        tokenInTable(p, token);\n      }\n  }\n}\nfunction tokenInTable(p, token) {\n  const savedFosterParentingState = p.fosterParentingEnabled;\n  p.fosterParentingEnabled = true;\n  // Process token in `In Body` mode\n  modeInBody(p, token);\n  p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n  p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n  p.pendingCharacterTokens.push(token);\n  p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n  let i = 0;\n  if (p.hasNonWhitespacePendingCharacterToken) {\n    for (; i < p.pendingCharacterTokens.length; i++) {\n      tokenInTable(p, p.pendingCharacterTokens[i]);\n    }\n  } else {\n    for (; i < p.pendingCharacterTokens.length; i++) {\n      p._insertCharacters(p.pendingCharacterTokens[i]);\n    }\n  }\n  p.insertionMode = p.originalInsertionMode;\n  p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([html_js_1.TAG_ID.CAPTION, html_js_1.TAG_ID.COL, html_js_1.TAG_ID.COLGROUP, html_js_1.TAG_ID.TBODY, html_js_1.TAG_ID.TD, html_js_1.TAG_ID.TFOOT, html_js_1.TAG_ID.TH, html_js_1.TAG_ID.THEAD, html_js_1.TAG_ID.TR]);\nfunction startTagInCaption(p, token) {\n  const tn = token.tagID;\n  if (TABLE_VOID_ELEMENTS.has(tn)) {\n    if (p.openElements.hasInTableScope(html_js_1.TAG_ID.CAPTION)) {\n      p.openElements.generateImpliedEndTags();\n      p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.CAPTION);\n      p.activeFormattingElements.clearToLastMarker();\n      p.insertionMode = InsertionMode.IN_TABLE;\n      startTagInTable(p, token);\n    }\n  } else {\n    startTagInBody(p, token);\n  }\n}\nfunction endTagInCaption(p, token) {\n  const tn = token.tagID;\n  switch (tn) {\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.TABLE:\n      {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.CAPTION)) {\n          p.openElements.generateImpliedEndTags();\n          p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.CAPTION);\n          p.activeFormattingElements.clearToLastMarker();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          if (tn === html_js_1.TAG_ID.TABLE) {\n            endTagInTable(p, token);\n          }\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.HTML:\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.TH:\n    case html_js_1.TAG_ID.THEAD:\n    case html_js_1.TAG_ID.TR:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        endTagInBody(p, token);\n      }\n  }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.COL:\n      {\n        p._appendElement(token, html_js_1.NS.HTML);\n        token.ackSelfClosing = true;\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n      {\n        tokenInColumnGroup(p, token);\n      }\n  }\n}\nfunction endTagInColumnGroup(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.COLGROUP:\n      {\n        if (p.openElements.currentTagId === html_js_1.TAG_ID.COLGROUP) {\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.COL:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        tokenInColumnGroup(p, token);\n      }\n  }\n}\nfunction tokenInColumnGroup(p, token) {\n  if (p.openElements.currentTagId === html_js_1.TAG_ID.COLGROUP) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_TABLE;\n    p._processToken(token);\n  }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.TR:\n      {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.insertionMode = InsertionMode.IN_ROW;\n        break;\n      }\n    case html_js_1.TAG_ID.TH:\n    case html_js_1.TAG_ID.TD:\n      {\n        p.openElements.clearBackToTableBodyContext();\n        p._insertFakeElement(html_js_1.TAG_NAMES.TR, html_js_1.TAG_ID.TR);\n        p.insertionMode = InsertionMode.IN_ROW;\n        startTagInRow(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n      {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          startTagInTable(p, token);\n        }\n        break;\n      }\n    default:\n      {\n        startTagInTable(p, token);\n      }\n  }\n}\nfunction endTagInTableBody(p, token) {\n  const tn = token.tagID;\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.TABLE:\n      {\n        if (p.openElements.hasTableBodyContextInTableScope()) {\n          p.openElements.clearBackToTableBodyContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE;\n          endTagInTable(p, token);\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.HTML:\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TH:\n    case html_js_1.TAG_ID.TR:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        endTagInTable(p, token);\n      }\n  }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.TH:\n    case html_js_1.TAG_ID.TD:\n      {\n        p.openElements.clearBackToTableRowContext();\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.insertionMode = InsertionMode.IN_CELL;\n        p.activeFormattingElements.insertMarker();\n        break;\n      }\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n    case html_js_1.TAG_ID.TR:\n      {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          startTagInTableBody(p, token);\n        }\n        break;\n      }\n    default:\n      {\n        startTagInTable(p, token);\n      }\n  }\n}\nfunction endTagInRow(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.TR:\n      {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.TABLE:\n      {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          endTagInTableBody(p, token);\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n      {\n        if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n          p.openElements.clearBackToTableRowContext();\n          p.openElements.pop();\n          p.insertionMode = InsertionMode.IN_TABLE_BODY;\n          endTagInTableBody(p, token);\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.HTML:\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TH:\n      {\n        // Ignore end tag\n        break;\n      }\n    default:\n      endTagInTable(p, token);\n  }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n  const tn = token.tagID;\n  if (TABLE_VOID_ELEMENTS.has(tn)) {\n    if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TD) || p.openElements.hasInTableScope(html_js_1.TAG_ID.TH)) {\n      p._closeTableCell();\n      startTagInRow(p, token);\n    }\n  } else {\n    startTagInBody(p, token);\n  }\n}\nfunction endTagInCell(p, token) {\n  const tn = token.tagID;\n  switch (tn) {\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TH:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p.openElements.generateImpliedEndTags();\n          p.openElements.popUntilTagNamePopped(tn);\n          p.activeFormattingElements.clearToLastMarker();\n          p.insertionMode = InsertionMode.IN_ROW;\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.TABLE:\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n    case html_js_1.TAG_ID.TR:\n      {\n        if (p.openElements.hasInTableScope(tn)) {\n          p._closeTableCell();\n          endTagInRow(p, token);\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.BODY:\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COL:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.HTML:\n      {\n        // Ignore token\n        break;\n      }\n    default:\n      {\n        endTagInBody(p, token);\n      }\n  }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.OPTION:\n      {\n        if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n          p.openElements.pop();\n        }\n        p._insertElement(token, html_js_1.NS.HTML);\n        break;\n      }\n    case html_js_1.TAG_ID.OPTGROUP:\n      {\n        if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n          p.openElements.pop();\n        }\n        if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTGROUP) {\n          p.openElements.pop();\n        }\n        p._insertElement(token, html_js_1.NS.HTML);\n        break;\n      }\n    case html_js_1.TAG_ID.INPUT:\n    case html_js_1.TAG_ID.KEYGEN:\n    case html_js_1.TAG_ID.TEXTAREA:\n    case html_js_1.TAG_ID.SELECT:\n      {\n        if (p.openElements.hasInSelectScope(html_js_1.TAG_ID.SELECT)) {\n          p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n          p._resetInsertionMode();\n          if (token.tagID !== html_js_1.TAG_ID.SELECT) {\n            p._processStartTag(token);\n          }\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.SCRIPT:\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n\nfunction endTagInSelect(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.OPTGROUP:\n      {\n        if (p.openElements.stackTop > 0 && p.openElements.currentTagId === html_js_1.TAG_ID.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === html_js_1.TAG_ID.OPTGROUP) {\n          p.openElements.pop();\n        }\n        if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTGROUP) {\n          p.openElements.pop();\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.OPTION:\n      {\n        if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n          p.openElements.pop();\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.SELECT:\n      {\n        if (p.openElements.hasInSelectScope(html_js_1.TAG_ID.SELECT)) {\n          p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n          p._resetInsertionMode();\n        }\n        break;\n      }\n    case html_js_1.TAG_ID.TEMPLATE:\n      {\n        templateEndTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n  const tn = token.tagID;\n  if (tn === html_js_1.TAG_ID.CAPTION || tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.TFOOT || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TR || tn === html_js_1.TAG_ID.TD || tn === html_js_1.TAG_ID.TH) {\n    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n    p._resetInsertionMode();\n    p._processStartTag(token);\n  } else {\n    startTagInSelect(p, token);\n  }\n}\nfunction endTagInSelectInTable(p, token) {\n  const tn = token.tagID;\n  if (tn === html_js_1.TAG_ID.CAPTION || tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.TFOOT || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TR || tn === html_js_1.TAG_ID.TD || tn === html_js_1.TAG_ID.TH) {\n    if (p.openElements.hasInTableScope(tn)) {\n      p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n      p._resetInsertionMode();\n      p.onEndTag(token);\n    }\n  } else {\n    endTagInSelect(p, token);\n  }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n  switch (token.tagID) {\n    // First, handle tags that can start without a mode change\n    case html_js_1.TAG_ID.BASE:\n    case html_js_1.TAG_ID.BASEFONT:\n    case html_js_1.TAG_ID.BGSOUND:\n    case html_js_1.TAG_ID.LINK:\n    case html_js_1.TAG_ID.META:\n    case html_js_1.TAG_ID.NOFRAMES:\n    case html_js_1.TAG_ID.SCRIPT:\n    case html_js_1.TAG_ID.STYLE:\n    case html_js_1.TAG_ID.TEMPLATE:\n    case html_js_1.TAG_ID.TITLE:\n      startTagInHead(p, token);\n      break;\n    // Re-process the token in the appropriate mode\n    case html_js_1.TAG_ID.CAPTION:\n    case html_js_1.TAG_ID.COLGROUP:\n    case html_js_1.TAG_ID.TBODY:\n    case html_js_1.TAG_ID.TFOOT:\n    case html_js_1.TAG_ID.THEAD:\n      p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n      p.insertionMode = InsertionMode.IN_TABLE;\n      startTagInTable(p, token);\n      break;\n    case html_js_1.TAG_ID.COL:\n      p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n      p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n      startTagInColumnGroup(p, token);\n      break;\n    case html_js_1.TAG_ID.TR:\n      p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n      p.insertionMode = InsertionMode.IN_TABLE_BODY;\n      startTagInTableBody(p, token);\n      break;\n    case html_js_1.TAG_ID.TD:\n    case html_js_1.TAG_ID.TH:\n      p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n      p.insertionMode = InsertionMode.IN_ROW;\n      startTagInRow(p, token);\n      break;\n    default:\n      p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n      p.insertionMode = InsertionMode.IN_BODY;\n      startTagInBody(p, token);\n  }\n}\nfunction endTagInTemplate(p, token) {\n  if (token.tagID === html_js_1.TAG_ID.TEMPLATE) {\n    templateEndTagInHead(p, token);\n  }\n}\nfunction eofInTemplate(p, token) {\n  if (p.openElements.tmplCount > 0) {\n    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TEMPLATE);\n    p.activeFormattingElements.clearToLastMarker();\n    p.tmplInsertionModeStack.shift();\n    p._resetInsertionMode();\n    p.onEof(token);\n  } else {\n    stopParsing(p, token);\n  }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n  if (token.tagID === html_js_1.TAG_ID.HTML) {\n    startTagInBody(p, token);\n  } else {\n    tokenAfterBody(p, token);\n  }\n}\nfunction endTagAfterBody(p, token) {\n  var _a;\n  if (token.tagID === html_js_1.TAG_ID.HTML) {\n    if (!p.fragmentContext) {\n      p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n    }\n    //NOTE: <html> is never popped from the stack, so we need to updated\n    //the end location explicitly.\n    if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === html_js_1.TAG_ID.HTML) {\n      p._setEndLocation(p.openElements.items[0], token);\n      // Update the body element, if it doesn't have an end tag\n      const bodyElement = p.openElements.items[1];\n      if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n        p._setEndLocation(bodyElement, token);\n      }\n    }\n  } else {\n    tokenAfterBody(p, token);\n  }\n}\nfunction tokenAfterBody(p, token) {\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.FRAMESET:\n      {\n        p._insertElement(token, html_js_1.NS.HTML);\n        break;\n      }\n    case html_js_1.TAG_ID.FRAME:\n      {\n        p._appendElement(token, html_js_1.NS.HTML);\n        token.ackSelfClosing = true;\n        break;\n      }\n    case html_js_1.TAG_ID.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n\nfunction endTagInFrameset(p, token) {\n  if (token.tagID === html_js_1.TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n    p.openElements.pop();\n    if (!p.fragmentContext && p.openElements.currentTagId !== html_js_1.TAG_ID.FRAMESET) {\n      p.insertionMode = InsertionMode.AFTER_FRAMESET;\n    }\n  }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n\nfunction endTagAfterFrameset(p, token) {\n  if (token.tagID === html_js_1.TAG_ID.HTML) {\n    p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n  }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n  if (token.tagID === html_js_1.TAG_ID.HTML) {\n    startTagInBody(p, token);\n  } else {\n    tokenAfterAfterBody(p, token);\n  }\n}\nfunction tokenAfterAfterBody(p, token) {\n  p.insertionMode = InsertionMode.IN_BODY;\n  modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n  switch (token.tagID) {\n    case html_js_1.TAG_ID.HTML:\n      {\n        startTagInBody(p, token);\n        break;\n      }\n    case html_js_1.TAG_ID.NOFRAMES:\n      {\n        startTagInHead(p, token);\n        break;\n      }\n    default:\n    // Do nothing\n  }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n  token.chars = unicode.REPLACEMENT_CHARACTER;\n  p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n  p._insertCharacters(token);\n  p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n  while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== html_js_1.NS.HTML && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n    p.openElements.pop();\n  }\n}\nfunction startTagInForeignContent(p, token) {\n  if (foreignContent.causesExit(token)) {\n    popUntilHtmlOrIntegrationPoint(p);\n    p._startTagOutsideForeignContent(token);\n  } else {\n    const current = p._getAdjustedCurrentElement();\n    const currentNs = p.treeAdapter.getNamespaceURI(current);\n    if (currentNs === html_js_1.NS.MATHML) {\n      foreignContent.adjustTokenMathMLAttrs(token);\n    } else if (currentNs === html_js_1.NS.SVG) {\n      foreignContent.adjustTokenSVGTagName(token);\n      foreignContent.adjustTokenSVGAttrs(token);\n    }\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n      p._appendElement(token, currentNs);\n    } else {\n      p._insertElement(token, currentNs);\n    }\n    token.ackSelfClosing = true;\n  }\n}\nfunction endTagInForeignContent(p, token) {\n  if (token.tagID === html_js_1.TAG_ID.P || token.tagID === html_js_1.TAG_ID.BR) {\n    popUntilHtmlOrIntegrationPoint(p);\n    p._endTagOutsideForeignContent(token);\n    return;\n  }\n  for (let i = p.openElements.stackTop; i > 0; i--) {\n    const element = p.openElements.items[i];\n    if (p.treeAdapter.getNamespaceURI(element) === html_js_1.NS.HTML) {\n      p._endTagOutsideForeignContent(token);\n      break;\n    }\n    const tagName = p.treeAdapter.getTagName(element);\n    if (tagName.toLowerCase() === token.tagName) {\n      //NOTE: update the token tag name for `_setEndLocation`.\n      token.tagName = tagName;\n      p.openElements.shortenToLength(i);\n      break;\n    }\n  }\n}\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}