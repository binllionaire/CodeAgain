{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLoad = void 0;\nvar options_js_1 = __importStar(require(\"./options.js\"));\nvar staticMethods = __importStar(require(\"./static.js\"));\nvar cheerio_js_1 = require(\"./cheerio.js\");\nvar utils_js_1 = require(\"./utils.js\");\nfunction getLoad(parse, render) {\n  /**\n   * Create a querying function, bound to a document created from the provided markup.\n   *\n   * Note that similar to web browser contexts, this operation may introduce\n   * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n   * switch to fragment mode and disable this.\n   *\n   * @param content - Markup to be loaded.\n   * @param options - Options for the created instance.\n   * @param isDocument - Allows parser to be switched to fragment mode.\n   * @returns The loaded document.\n   * @see {@link https://cheerio.js.org#loading} for additional usage information.\n   */\n  return function load(content, options, isDocument) {\n    if (isDocument === void 0) {\n      isDocument = true;\n    }\n    if (content == null) {\n      throw new Error('cheerio.load() expects a string');\n    }\n    var internalOpts = __assign(__assign({}, options_js_1.default), (0, options_js_1.flatten)(options));\n    var initialRoot = parse(content, internalOpts, isDocument, null);\n    /** Create an extended class here, so that extensions only live on one instance. */\n    var LoadedCheerio = /** @class */function (_super) {\n      __extends(LoadedCheerio, _super);\n      function LoadedCheerio() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      LoadedCheerio.prototype._make = function (selector, context) {\n        var cheerio = initialize(selector, context);\n        cheerio.prevObject = this;\n        return cheerio;\n      };\n      LoadedCheerio.prototype._parse = function (content, options, isDocument, context) {\n        return parse(content, options, isDocument, context);\n      };\n      LoadedCheerio.prototype._render = function (dom) {\n        return render(dom, this.options);\n      };\n      return LoadedCheerio;\n    }(cheerio_js_1.Cheerio);\n    function initialize(selector, context, root, opts) {\n      if (root === void 0) {\n        root = initialRoot;\n      }\n      // $($)\n      if (selector && (0, utils_js_1.isCheerio)(selector)) return selector;\n      var options = __assign(__assign({}, internalOpts), (0, options_js_1.flatten)(opts));\n      var r = typeof root === 'string' ? [parse(root, options, false, null)] : 'length' in root ? root : [root];\n      var rootInstance = (0, utils_js_1.isCheerio)(r) ? r : new LoadedCheerio(r, null, options);\n      // Add a cyclic reference, so that calling methods on `_root` never fails.\n      rootInstance._root = rootInstance;\n      // $(), $(null), $(undefined), $(false)\n      if (!selector) {\n        return new LoadedCheerio(undefined, rootInstance, options);\n      }\n      var elements = typeof selector === 'string' && (0, utils_js_1.isHtml)(selector) ?\n      // $(<html>)\n      parse(selector, options, false, null).children : isNode(selector) ?\n      // $(dom)\n      [selector] : Array.isArray(selector) ?\n      // $([dom])\n      selector : undefined;\n      var instance = new LoadedCheerio(elements, rootInstance, options);\n      if (elements) {\n        return instance;\n      }\n      if (typeof selector !== 'string') {\n        throw new Error('Unexpected type of selector');\n      }\n      // We know that our selector is a string now.\n      var search = selector;\n      var searchContext = !context ?\n      // If we don't have a context, maybe we have a root, from loading\n      rootInstance : typeof context === 'string' ? (0, utils_js_1.isHtml)(context) ?\n      // $('li', '<ul>...</ul>')\n      new LoadedCheerio([parse(context, options, false, null)], rootInstance, options) : (\n      // $('li', 'ul')\n      search = \"\".concat(context, \" \").concat(search), rootInstance) : (0, utils_js_1.isCheerio)(context) ?\n      // $('li', $)\n      context :\n      // $('li', node), $('li', [nodes])\n      new LoadedCheerio(Array.isArray(context) ? context : [context], rootInstance, options);\n      // If we still don't have a context, return\n      if (!searchContext) return instance;\n      /*\n       * #id, .class, tag\n       */\n      return searchContext.find(search);\n    }\n    // Add in static methods & properties\n    Object.assign(initialize, staticMethods, {\n      load: load,\n      // `_root` and `_options` are used in static methods.\n      _root: initialRoot,\n      _options: internalOpts,\n      // Add `fn` for plugins\n      fn: LoadedCheerio.prototype,\n      // Add the prototype here to maintain `instanceof` behavior.\n      prototype: LoadedCheerio.prototype\n    });\n    return initialize;\n  };\n}\nexports.getLoad = getLoad;\nfunction isNode(obj) {\n  return !!obj.name || obj.type === 'root' || obj.type === 'text' || obj.type === 'comment';\n}\n//# sourceMappingURL=load.js.map","map":null,"metadata":{},"sourceType":"script"}