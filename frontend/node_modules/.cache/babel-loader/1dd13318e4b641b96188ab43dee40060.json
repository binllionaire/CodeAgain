{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseFragment = exports.parse = exports.TokenizerMode = exports.Tokenizer = exports.Token = exports.html = exports.foreignContent = exports.serializeOuter = exports.serialize = exports.Parser = exports.defaultTreeAdapter = void 0;\nconst index_js_1 = require(\"./parser/index.js\");\nvar default_js_1 = require(\"./tree-adapters/default.js\");\nObject.defineProperty(exports, \"defaultTreeAdapter\", {\n  enumerable: true,\n  get: function () {\n    return default_js_1.defaultTreeAdapter;\n  }\n});\nvar index_js_2 = require(\"./parser/index.js\");\nObject.defineProperty(exports, \"Parser\", {\n  enumerable: true,\n  get: function () {\n    return index_js_2.Parser;\n  }\n});\nvar index_js_3 = require(\"./serializer/index.js\");\nObject.defineProperty(exports, \"serialize\", {\n  enumerable: true,\n  get: function () {\n    return index_js_3.serialize;\n  }\n});\nObject.defineProperty(exports, \"serializeOuter\", {\n  enumerable: true,\n  get: function () {\n    return index_js_3.serializeOuter;\n  }\n});\n/** @internal */\nexports.foreignContent = require(\"./common/foreign-content.js\");\n/** @internal */\nexports.html = require(\"./common/html.js\");\n/** @internal */\nexports.Token = require(\"./common/token.js\");\n/** @internal */\nvar index_js_4 = require(\"./tokenizer/index.js\");\nObject.defineProperty(exports, \"Tokenizer\", {\n  enumerable: true,\n  get: function () {\n    return index_js_4.Tokenizer;\n  }\n});\nObject.defineProperty(exports, \"TokenizerMode\", {\n  enumerable: true,\n  get: function () {\n    return index_js_4.TokenizerMode;\n  }\n});\n// Shorthands\n/**\n * Parses an HTML string.\n *\n * @param html Input HTML string.\n * @param options Parsing options.\n * @returns Document\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * console.log(document.childNodes[1].tagName); //> 'html'\n *```\n */\nfunction parse(html, options) {\n  return index_js_1.Parser.parse(html, options);\n}\nexports.parse = parse;\nfunction parseFragment(fragmentContext, html, options) {\n  if (typeof fragmentContext === 'string') {\n    options = html;\n    html = fragmentContext;\n    fragmentContext = null;\n  }\n  const parser = index_js_1.Parser.getFragmentParser(fragmentContext, options);\n  parser.tokenizer.write(html, true);\n  return parser.getFragment();\n}\nexports.parseFragment = parseFragment;\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script"}