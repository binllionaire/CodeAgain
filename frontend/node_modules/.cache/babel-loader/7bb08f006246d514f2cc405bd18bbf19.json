{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isIntegrationPoint = exports.adjustTokenSVGTagName = exports.adjustTokenXMLAttrs = exports.adjustTokenSVGAttrs = exports.adjustTokenMathMLAttrs = exports.causesExit = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = void 0;\nconst html_js_1 = require(\"./html.js\");\n//MIME types\nconst MIME_TYPES = {\n  TEXT_HTML: 'text/html',\n  APPLICATION_XML: 'application/xhtml+xml'\n};\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map(['attributeName', 'attributeType', 'baseFrequency', 'baseProfile', 'calcMode', 'clipPathUnits', 'diffuseConstant', 'edgeMode', 'filterUnits', 'glyphRef', 'gradientTransform', 'gradientUnits', 'kernelMatrix', 'kernelUnitLength', 'keyPoints', 'keySplines', 'keyTimes', 'lengthAdjust', 'limitingConeAngle', 'markerHeight', 'markerUnits', 'markerWidth', 'maskContentUnits', 'maskUnits', 'numOctaves', 'pathLength', 'patternContentUnits', 'patternTransform', 'patternUnits', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits', 'refX', 'refY', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'specularConstant', 'specularExponent', 'spreadMethod', 'startOffset', 'stdDeviation', 'stitchTiles', 'surfaceScale', 'systemLanguage', 'tableValues', 'targetX', 'targetY', 'textLength', 'viewBox', 'viewTarget', 'xChannelSelector', 'yChannelSelector', 'zoomAndPan'].map(attr => [attr.toLowerCase(), attr]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([['xlink:actuate', {\n  prefix: 'xlink',\n  name: 'actuate',\n  namespace: html_js_1.NS.XLINK\n}], ['xlink:arcrole', {\n  prefix: 'xlink',\n  name: 'arcrole',\n  namespace: html_js_1.NS.XLINK\n}], ['xlink:href', {\n  prefix: 'xlink',\n  name: 'href',\n  namespace: html_js_1.NS.XLINK\n}], ['xlink:role', {\n  prefix: 'xlink',\n  name: 'role',\n  namespace: html_js_1.NS.XLINK\n}], ['xlink:show', {\n  prefix: 'xlink',\n  name: 'show',\n  namespace: html_js_1.NS.XLINK\n}], ['xlink:title', {\n  prefix: 'xlink',\n  name: 'title',\n  namespace: html_js_1.NS.XLINK\n}], ['xlink:type', {\n  prefix: 'xlink',\n  name: 'type',\n  namespace: html_js_1.NS.XLINK\n}], ['xml:base', {\n  prefix: 'xml',\n  name: 'base',\n  namespace: html_js_1.NS.XML\n}], ['xml:lang', {\n  prefix: 'xml',\n  name: 'lang',\n  namespace: html_js_1.NS.XML\n}], ['xml:space', {\n  prefix: 'xml',\n  name: 'space',\n  namespace: html_js_1.NS.XML\n}], ['xmlns', {\n  prefix: '',\n  name: 'xmlns',\n  namespace: html_js_1.NS.XMLNS\n}], ['xmlns:xlink', {\n  prefix: 'xmlns',\n  name: 'xlink',\n  namespace: html_js_1.NS.XMLNS\n}]]);\n//SVG tag names adjustment map\nexports.SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map(['altGlyph', 'altGlyphDef', 'altGlyphItem', 'animateColor', 'animateMotion', 'animateTransform', 'clipPath', 'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'foreignObject', 'glyphRef', 'linearGradient', 'radialGradient', 'textPath'].map(tn => [tn.toLowerCase(), tn]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([html_js_1.TAG_ID.B, html_js_1.TAG_ID.BIG, html_js_1.TAG_ID.BLOCKQUOTE, html_js_1.TAG_ID.BODY, html_js_1.TAG_ID.BR, html_js_1.TAG_ID.CENTER, html_js_1.TAG_ID.CODE, html_js_1.TAG_ID.DD, html_js_1.TAG_ID.DIV, html_js_1.TAG_ID.DL, html_js_1.TAG_ID.DT, html_js_1.TAG_ID.EM, html_js_1.TAG_ID.EMBED, html_js_1.TAG_ID.H1, html_js_1.TAG_ID.H2, html_js_1.TAG_ID.H3, html_js_1.TAG_ID.H4, html_js_1.TAG_ID.H5, html_js_1.TAG_ID.H6, html_js_1.TAG_ID.HEAD, html_js_1.TAG_ID.HR, html_js_1.TAG_ID.I, html_js_1.TAG_ID.IMG, html_js_1.TAG_ID.LI, html_js_1.TAG_ID.LISTING, html_js_1.TAG_ID.MENU, html_js_1.TAG_ID.META, html_js_1.TAG_ID.NOBR, html_js_1.TAG_ID.OL, html_js_1.TAG_ID.P, html_js_1.TAG_ID.PRE, html_js_1.TAG_ID.RUBY, html_js_1.TAG_ID.S, html_js_1.TAG_ID.SMALL, html_js_1.TAG_ID.SPAN, html_js_1.TAG_ID.STRONG, html_js_1.TAG_ID.STRIKE, html_js_1.TAG_ID.SUB, html_js_1.TAG_ID.SUP, html_js_1.TAG_ID.TABLE, html_js_1.TAG_ID.TT, html_js_1.TAG_ID.U, html_js_1.TAG_ID.UL, html_js_1.TAG_ID.VAR]);\n//Check exit from foreign content\nfunction causesExit(startTagToken) {\n  const tn = startTagToken.tagID;\n  const isFontWithAttrs = tn === html_js_1.TAG_ID.FONT && startTagToken.attrs.some(_ref => {\n    let {\n      name\n    } = _ref;\n    return name === html_js_1.ATTRS.COLOR || name === html_js_1.ATTRS.SIZE || name === html_js_1.ATTRS.FACE;\n  });\n  return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\nexports.causesExit = causesExit;\n//Token adjustments\nfunction adjustTokenMathMLAttrs(token) {\n  for (let i = 0; i < token.attrs.length; i++) {\n    if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n      token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n      break;\n    }\n  }\n}\nexports.adjustTokenMathMLAttrs = adjustTokenMathMLAttrs;\nfunction adjustTokenSVGAttrs(token) {\n  for (let i = 0; i < token.attrs.length; i++) {\n    const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n    if (adjustedAttrName != null) {\n      token.attrs[i].name = adjustedAttrName;\n    }\n  }\n}\nexports.adjustTokenSVGAttrs = adjustTokenSVGAttrs;\nfunction adjustTokenXMLAttrs(token) {\n  for (let i = 0; i < token.attrs.length; i++) {\n    const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n    if (adjustedAttrEntry) {\n      token.attrs[i].prefix = adjustedAttrEntry.prefix;\n      token.attrs[i].name = adjustedAttrEntry.name;\n      token.attrs[i].namespace = adjustedAttrEntry.namespace;\n    }\n  }\n}\nexports.adjustTokenXMLAttrs = adjustTokenXMLAttrs;\nfunction adjustTokenSVGTagName(token) {\n  const adjustedTagName = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n  if (adjustedTagName != null) {\n    token.tagName = adjustedTagName;\n    token.tagID = (0, html_js_1.getTagID)(token.tagName);\n  }\n}\nexports.adjustTokenSVGTagName = adjustTokenSVGTagName;\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n  return ns === html_js_1.NS.MATHML && (tn === html_js_1.TAG_ID.MI || tn === html_js_1.TAG_ID.MO || tn === html_js_1.TAG_ID.MN || tn === html_js_1.TAG_ID.MS || tn === html_js_1.TAG_ID.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n  if (ns === html_js_1.NS.MATHML && tn === html_js_1.TAG_ID.ANNOTATION_XML) {\n    for (let i = 0; i < attrs.length; i++) {\n      if (attrs[i].name === html_js_1.ATTRS.ENCODING) {\n        const value = attrs[i].value.toLowerCase();\n        return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n      }\n    }\n  }\n  return ns === html_js_1.NS.SVG && (tn === html_js_1.TAG_ID.FOREIGN_OBJECT || tn === html_js_1.TAG_ID.DESC || tn === html_js_1.TAG_ID.TITLE);\n}\nfunction isIntegrationPoint(tn, ns, attrs, foreignNS) {\n  return (!foreignNS || foreignNS === html_js_1.NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs) || (!foreignNS || foreignNS === html_js_1.NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns);\n}\nexports.isIntegrationPoint = isIntegrationPoint;\n//# sourceMappingURL=foreign-content.js.map","map":null,"metadata":{},"sourceType":"script"}