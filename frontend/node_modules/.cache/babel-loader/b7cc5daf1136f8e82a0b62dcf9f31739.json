{"ast":null,"code":"\"use strict\";\n\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = exports.text = exports.toString = exports.html = exports.empty = exports.replaceWith = exports.remove = exports.insertBefore = exports.before = exports.insertAfter = exports.after = exports.wrapAll = exports.unwrap = exports.wrapInner = exports.wrap = exports.prepend = exports.append = exports.prependTo = exports.appendTo = exports._makeDomArray = void 0;\nvar domhandler_1 = require(\"domhandler\");\nvar parse_js_1 = require(\"../parse.js\");\nvar static_js_1 = require(\"../static.js\");\nvar utils_js_1 = require(\"../utils.js\");\nvar domutils_1 = require(\"domutils\");\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */\nfunction _makeDomArray(elem, clone) {\n  var _this = this;\n  if (elem == null) {\n    return [];\n  }\n  if ((0, utils_js_1.isCheerio)(elem)) {\n    return clone ? (0, utils_js_1.cloneDom)(elem.get()) : elem.get();\n  }\n  if (Array.isArray(elem)) {\n    return elem.reduce(function (newElems, el) {\n      return newElems.concat(_this._makeDomArray(el, clone));\n    }, []);\n  }\n  if (typeof elem === 'string') {\n    return this._parse(elem, this.options, false, null).children;\n  }\n  return clone ? (0, utils_js_1.cloneDom)([elem]) : [elem];\n}\nexports._makeDomArray = _makeDomArray;\nfunction _insert(concatenator) {\n  return function () {\n    var _this = this;\n    var elems = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      elems[_i] = arguments[_i];\n    }\n    var lastIdx = this.length - 1;\n    return (0, utils_js_1.domEach)(this, function (el, i) {\n      if (!(0, domhandler_1.hasChildren)(el)) return;\n      var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, _this._render(el.children)) : elems;\n      var dom = _this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n  var _a, _b;\n  var spliceArgs = __spreadArray([spliceIdx, spliceCount], newElems, true);\n  var prev = spliceIdx === 0 ? null : array[spliceIdx - 1];\n  var next = spliceIdx + spliceCount >= array.length ? null : array[spliceIdx + spliceCount];\n  /*\n   * Before splicing in new elements, ensure they do not already appear in the\n   * current array.\n   */\n  for (var idx = 0; idx < newElems.length; ++idx) {\n    var node = newElems[idx];\n    var oldParent = node.parent;\n    if (oldParent) {\n      var oldSiblings = oldParent.children;\n      var prevIdx = oldSiblings.indexOf(node);\n      if (prevIdx > -1) {\n        oldParent.children.splice(prevIdx, 1);\n        if (parent === oldParent && spliceIdx > prevIdx) {\n          spliceArgs[0]--;\n        }\n      }\n    }\n    node.parent = parent;\n    if (node.prev) {\n      node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n    }\n    if (node.next) {\n      node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n    }\n    node.prev = idx === 0 ? prev : newElems[idx - 1];\n    node.next = idx === newElems.length - 1 ? next : newElems[idx + 1];\n  }\n  if (prev) {\n    prev.next = newElems[0];\n  }\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n  return array.splice.apply(array, spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nfunction appendTo(target) {\n  var appendTarget = (0, utils_js_1.isCheerio)(target) ? target : this._make(target);\n  appendTarget.append(this);\n  return this;\n}\nexports.appendTo = appendTo;\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nfunction prependTo(target) {\n  var prependTarget = (0, utils_js_1.isCheerio)(target) ? target : this._make(target);\n  prependTarget.prepend(this);\n  return this;\n}\nexports.prependTo = prependTo;\n/**\n * Inserts content as the _last_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the _first_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n  return function (wrapper) {\n    var lastIdx = this.length - 1;\n    var lastParent = this.parents().last();\n    for (var i = 0; i < this.length; i++) {\n      var el = this[i];\n      var wrap_1 = typeof wrapper === 'function' ? wrapper.call(el, i, el) : typeof wrapper === 'string' && !(0, utils_js_1.isHtml)(wrapper) ? lastParent.find(wrapper).clone() : wrapper;\n      var wrapperDom = this._makeDomArray(wrap_1, i < lastIdx)[0];\n      if (!wrapperDom || !(0, domhandler_1.hasChildren)(wrapperDom)) continue;\n      var elInsertLocation = wrapperDom;\n      /*\n       * Find the deepest child. Only consider the first tag child of each node\n       * (ignore text); stop if no children are found.\n       */\n      var j = 0;\n      while (j < elInsertLocation.children.length) {\n        var child = elInsertLocation.children[j];\n        if ((0, utils_js_1.isTag)(child)) {\n          elInsertLocation = child;\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n      insert(el, elInsertLocation, [wrapperDom]);\n    }\n    return this;\n  };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n  var parent = el.parent;\n  if (!parent) return;\n  var siblings = parent.children;\n  var index = siblings.indexOf(el);\n  (0, parse_js_1.update)([el], elInsertLocation);\n  /*\n   * The previous operation removed the current element from the `siblings`\n   * array, so the `dom` array can be inserted without removing any\n   * additional elements.\n   */\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n  if (!(0, domhandler_1.hasChildren)(el)) return;\n  (0, parse_js_1.update)(el.children, elInsertLocation);\n  (0, parse_js_1.update)(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nfunction unwrap(selector) {\n  var _this = this;\n  this.parent(selector).not('body').each(function (_, el) {\n    _this._make(el).replaceWith(el.children);\n  });\n  return this;\n}\nexports.unwrap = unwrap;\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nfunction wrapAll(wrapper) {\n  var el = this[0];\n  if (el) {\n    var wrap_2 = this._make(typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n    // If html is given as wrapper, wrap may contain text elements\n    var elInsertLocation = void 0;\n    for (var i = 0; i < wrap_2.length; i++) {\n      if (wrap_2[i].type === 'tag') elInsertLocation = wrap_2[i];\n    }\n    var j = 0;\n    /*\n     * Find the deepest child. Only consider the first tag child of each node\n     * (ignore text); stop if no children are found.\n     */\n    while (elInsertLocation && j < elInsertLocation.children.length) {\n      var child = elInsertLocation.children[j];\n      if (child.type === 'tag') {\n        elInsertLocation = child;\n        j = 0;\n      } else {\n        j++;\n      }\n    }\n    if (elInsertLocation) this._make(elInsertLocation).append(this);\n  }\n  return this;\n}\nexports.wrapAll = wrapAll;\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nfunction after() {\n  var _this = this;\n  var elems = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    elems[_i] = arguments[_i];\n  }\n  var lastIdx = this.length - 1;\n  return (0, utils_js_1.domEach)(this, function (el, i) {\n    var parent = el.parent;\n    if (!(0, domhandler_1.hasChildren)(el) || !parent) {\n      return;\n    }\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, _this._render(el.children)) : elems;\n    var dom = _this._makeDomArray(domSrc, i < lastIdx);\n    // Add element after `this` element\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n}\nexports.after = after;\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nfunction insertAfter(target) {\n  var _this = this;\n  if (typeof target === 'string') {\n    target = this._make(target);\n  }\n  this.remove();\n  var clones = [];\n  this._makeDomArray(target).forEach(function (el) {\n    var clonedSelf = _this.clone().toArray();\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push.apply(clones, clonedSelf);\n  });\n  return this._make(clones);\n}\nexports.insertAfter = insertAfter;\n/* eslint-disable jsdoc/check-param-names*/\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nfunction before() {\n  var _this = this;\n  var elems = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    elems[_i] = arguments[_i];\n  }\n  var lastIdx = this.length - 1;\n  return (0, utils_js_1.domEach)(this, function (el, i) {\n    var parent = el.parent;\n    if (!(0, domhandler_1.hasChildren)(el) || !parent) {\n      return;\n    }\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, _this._render(el.children)) : elems;\n    var dom = _this._makeDomArray(domSrc, i < lastIdx);\n    // Add element before `el` element\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n}\nexports.before = before;\n/* eslint-enable jsdoc/check-param-names*/\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nfunction insertBefore(target) {\n  var _this = this;\n  var targetArr = this._make(target);\n  this.remove();\n  var clones = [];\n  (0, utils_js_1.domEach)(targetArr, function (el) {\n    var clonedSelf = _this.clone().toArray();\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push.apply(clones, clonedSelf);\n  });\n  return this._make(clones);\n}\nexports.insertBefore = insertBefore;\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nfunction remove(selector) {\n  // Filter if we have selector\n  var elems = selector ? this.filter(selector) : this;\n  (0, utils_js_1.domEach)(elems, function (el) {\n    (0, domutils_1.removeElement)(el);\n    el.prev = el.next = el.parent = null;\n  });\n  return this;\n}\nexports.remove = remove;\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nfunction replaceWith(content) {\n  var _this = this;\n  return (0, utils_js_1.domEach)(this, function (el, i) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n    var siblings = parent.children;\n    var cont = typeof content === 'function' ? content.call(el, i, el) : content;\n    var dom = _this._makeDomArray(cont);\n    /*\n     * In the case that `dom` contains nodes that already exist in other\n     * structures, ensure those nodes are properly removed.\n     */\n    (0, parse_js_1.update)(dom, null);\n    var index = siblings.indexOf(el);\n    // Completely remove old element\n    uniqueSplice(siblings, index, 1, dom, parent);\n    if (!dom.includes(el)) {\n      el.parent = el.prev = el.next = null;\n    }\n  });\n}\nexports.replaceWith = replaceWith;\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nfunction empty() {\n  return (0, utils_js_1.domEach)(this, function (el) {\n    if (!(0, domhandler_1.hasChildren)(el)) return;\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    el.children.length = 0;\n  });\n}\nexports.empty = empty;\nfunction html(str) {\n  var _this = this;\n  if (str === undefined) {\n    var el = this[0];\n    if (!el || !(0, domhandler_1.hasChildren)(el)) return null;\n    return this._render(el.children);\n  }\n  return (0, utils_js_1.domEach)(this, function (el) {\n    if (!(0, domhandler_1.hasChildren)(el)) return;\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    var content = (0, utils_js_1.isCheerio)(str) ? str.toArray() : _this._parse(\"\".concat(str), _this.options, false, el).children;\n    (0, parse_js_1.update)(content, el);\n  });\n}\nexports.html = html;\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */\nfunction toString() {\n  return this._render(this);\n}\nexports.toString = toString;\nfunction text(str) {\n  var _this = this;\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return (0, static_js_1.text)(this);\n  }\n  if (typeof str === 'function') {\n    // Function support\n    return (0, utils_js_1.domEach)(this, function (el, i) {\n      return _this._make(el).text(str.call(el, i, (0, static_js_1.text)([el])));\n    });\n  }\n  // Append text node to each selected elements\n  return (0, utils_js_1.domEach)(this, function (el) {\n    if (!(0, domhandler_1.hasChildren)(el)) return;\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    var textNode = new domhandler_1.Text(\"\".concat(str));\n    (0, parse_js_1.update)(textNode, el);\n  });\n}\nexports.text = text;\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nfunction clone() {\n  return this._make((0, utils_js_1.cloneDom)(this.get()));\n}\nexports.clone = clone;\n//# sourceMappingURL=manipulation.js.map","map":null,"metadata":{},"sourceType":"script"}